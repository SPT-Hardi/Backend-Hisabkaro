//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 15-04-2022 16:30:29
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace HisabKaroDBContext
{

    [DatabaseAttribute(Name = "HisabKaroDB")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class DBContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCommonContactAddress(CommonContactAddress instance);
        partial void UpdateCommonContactAddress(CommonContactAddress instance);
        partial void DeleteCommonContactAddress(CommonContactAddress instance);
        partial void InsertCommonFile(CommonFile instance);
        partial void UpdateCommonFile(CommonFile instance);
        partial void DeleteCommonFile(CommonFile instance);
        partial void InsertDevController(DevController instance);
        partial void UpdateDevController(DevController instance);
        partial void DeleteDevController(DevController instance);
        partial void InsertDevControllerType(DevControllerType instance);
        partial void UpdateDevControllerType(DevControllerType instance);
        partial void DeleteDevControllerType(DevControllerType instance);
        partial void InsertDevOrganisationBranch(DevOrganisationBranch instance);
        partial void UpdateDevOrganisationBranch(DevOrganisationBranch instance);
        partial void DeleteDevOrganisationBranch(DevOrganisationBranch instance);
        partial void InsertDevOrganisation(DevOrganisation instance);
        partial void UpdateDevOrganisation(DevOrganisation instance);
        partial void DeleteDevOrganisation(DevOrganisation instance);
        partial void InsertDevOrganisationsBranchesShiftTime(DevOrganisationsBranchesShiftTime instance);
        partial void UpdateDevOrganisationsBranchesShiftTime(DevOrganisationsBranchesShiftTime instance);
        partial void DeleteDevOrganisationsBranchesShiftTime(DevOrganisationsBranchesShiftTime instance);
        partial void InsertDevOrganisationsPartner(DevOrganisationsPartner instance);
        partial void UpdateDevOrganisationsPartner(DevOrganisationsPartner instance);
        partial void DeleteDevOrganisationsPartner(DevOrganisationsPartner instance);
        partial void InsertDevOrganisationsShiftTime(DevOrganisationsShiftTime instance);
        partial void UpdateDevOrganisationsShiftTime(DevOrganisationsShiftTime instance);
        partial void DeleteDevOrganisationsShiftTime(DevOrganisationsShiftTime instance);
        partial void InsertDevOrganisationsStaff(DevOrganisationsStaff instance);
        partial void UpdateDevOrganisationsStaff(DevOrganisationsStaff instance);
        partial void DeleteDevOrganisationsStaff(DevOrganisationsStaff instance);
        partial void InsertDevOrganisationsStaffsBankDetail(DevOrganisationsStaffsBankDetail instance);
        partial void UpdateDevOrganisationsStaffsBankDetail(DevOrganisationsStaffsBankDetail instance);
        partial void DeleteDevOrganisationsStaffsBankDetail(DevOrganisationsStaffsBankDetail instance);
        partial void InsertEmpApplyJobDetail(EmpApplyJobDetail instance);
        partial void UpdateEmpApplyJobDetail(EmpApplyJobDetail instance);
        partial void DeleteEmpApplyJobDetail(EmpApplyJobDetail instance);
        partial void InsertEmpBookmarkJobsDetail(EmpBookmarkJobsDetail instance);
        partial void UpdateEmpBookmarkJobsDetail(EmpBookmarkJobsDetail instance);
        partial void DeleteEmpBookmarkJobsDetail(EmpBookmarkJobsDetail instance);
        partial void InsertEmpResumeAbout(EmpResumeAbout instance);
        partial void UpdateEmpResumeAbout(EmpResumeAbout instance);
        partial void DeleteEmpResumeAbout(EmpResumeAbout instance);
        partial void InsertEmpResumeEducation(EmpResumeEducation instance);
        partial void UpdateEmpResumeEducation(EmpResumeEducation instance);
        partial void DeleteEmpResumeEducation(EmpResumeEducation instance);
        partial void InsertEmpResumeOtherCertificate(EmpResumeOtherCertificate instance);
        partial void UpdateEmpResumeOtherCertificate(EmpResumeOtherCertificate instance);
        partial void DeleteEmpResumeOtherCertificate(EmpResumeOtherCertificate instance);
        partial void InsertEmpResumeSkill(EmpResumeSkill instance);
        partial void UpdateEmpResumeSkill(EmpResumeSkill instance);
        partial void DeleteEmpResumeSkill(EmpResumeSkill instance);
        partial void InsertEmpResumeWorkExperience(EmpResumeWorkExperience instance);
        partial void UpdateEmpResumeWorkExperience(EmpResumeWorkExperience instance);
        partial void DeleteEmpResumeWorkExperience(EmpResumeWorkExperience instance);
        partial void InsertEmprJob(EmprJob instance);
        partial void UpdateEmprJob(EmprJob instance);
        partial void DeleteEmprJob(EmprJob instance);
        partial void InsertEmprJobSkill(EmprJobSkill instance);
        partial void UpdateEmprJobSkill(EmprJobSkill instance);
        partial void DeleteEmprJobSkill(EmprJobSkill instance);
        partial void InsertEmprJobType(EmprJobType instance);
        partial void UpdateEmprJobType(EmprJobType instance);
        partial void DeleteEmprJobType(EmprJobType instance);
        partial void InsertOrgStaffsAttendancesDaily(OrgStaffsAttendancesDaily instance);
        partial void UpdateOrgStaffsAttendancesDaily(OrgStaffsAttendancesDaily instance);
        partial void DeleteOrgStaffsAttendancesDaily(OrgStaffsAttendancesDaily instance);
        partial void InsertOrgStaffsLeaveApplication(OrgStaffsLeaveApplication instance);
        partial void UpdateOrgStaffsLeaveApplication(OrgStaffsLeaveApplication instance);
        partial void DeleteOrgStaffsLeaveApplication(OrgStaffsLeaveApplication instance);
        partial void InsertSubFixedLookup(SubFixedLookup instance);
        partial void UpdateSubFixedLookup(SubFixedLookup instance);
        partial void DeleteSubFixedLookup(SubFixedLookup instance);
        partial void InsertSubLookup(SubLookup instance);
        partial void UpdateSubLookup(SubLookup instance);
        partial void DeleteSubLookup(SubLookup instance);
        partial void InsertSubOTP(SubOTP instance);
        partial void UpdateSubOTP(SubOTP instance);
        partial void DeleteSubOTP(SubOTP instance);
        partial void InsertSubRoleController(SubRoleController instance);
        partial void UpdateSubRoleController(SubRoleController instance);
        partial void DeleteSubRoleController(SubRoleController instance);
        partial void InsertSubRole(SubRole instance);
        partial void UpdateSubRole(SubRole instance);
        partial void DeleteSubRole(SubRole instance);
        partial void InsertSubUserOrganisation(SubUserOrganisation instance);
        partial void UpdateSubUserOrganisation(SubUserOrganisation instance);
        partial void DeleteSubUserOrganisation(SubUserOrganisation instance);
        partial void InsertSubUserToken(SubUserToken instance);
        partial void UpdateSubUserToken(SubUserToken instance);
        partial void DeleteSubUserToken(SubUserToken instance);
        partial void InsertSubUser(SubUser instance);
        partial void UpdateSubUser(SubUser instance);
        partial void DeleteSubUser(SubUser instance);
        partial void InsertSubUsersDetail(SubUsersDetail instance);
        partial void UpdateSubUsersDetail(SubUsersDetail instance);
        partial void DeleteSubUsersDetail(SubUsersDetail instance);
        partial void InsertSubUsersIdentity(SubUsersIdentity instance);
        partial void UpdateSubUsersIdentity(SubUsersIdentity instance);
        partial void DeleteSubUsersIdentity(SubUsersIdentity instance);
        partial void InsertSubUsersTotalworkexperience(SubUsersTotalworkexperience instance);
        partial void UpdateSubUsersTotalworkexperience(SubUsersTotalworkexperience instance);
        partial void DeleteSubUsersTotalworkexperience(SubUsersTotalworkexperience instance);

        #endregion

        public DBContext() :
        base(@"Data Source=20.204.136.73;Initial Catalog=HisabKaroDB;Integrated Security=False;Persist Security Info=True;User ID=HIsabKaroDB;Password=Otobit@2022@@#", mappingSource)
        {
            OnCreated();
        }

        public DBContext(MappingSource mappingSource) :
        base(@"Data Source=20.204.136.73;Initial Catalog=HisabKaroDB;Integrated Security=False;Persist Security Info=True;User ID=HIsabKaroDB;Password=Otobit@2022@@#", mappingSource)
        {
            OnCreated();
        }

        public DBContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<CommonContactAddress> CommonContactAddresses
        {
            get
            {
                return this.GetTable<CommonContactAddress>();
            }
        }

        public Devart.Data.Linq.Table<CommonFile> CommonFiles
        {
            get
            {
                return this.GetTable<CommonFile>();
            }
        }

        public Devart.Data.Linq.Table<DevController> DevControllers
        {
            get
            {
                return this.GetTable<DevController>();
            }
        }

        public Devart.Data.Linq.Table<DevControllerType> DevControllerTypes
        {
            get
            {
                return this.GetTable<DevControllerType>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisationBranch> DevOrganisationBranches
        {
            get
            {
                return this.GetTable<DevOrganisationBranch>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisation> DevOrganisations
        {
            get
            {
                return this.GetTable<DevOrganisation>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisationsBranchesShiftTime> DevOrganisationsBranchesShiftTimes
        {
            get
            {
                return this.GetTable<DevOrganisationsBranchesShiftTime>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisationsPartner> DevOrganisationsPartners
        {
            get
            {
                return this.GetTable<DevOrganisationsPartner>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisationsShiftTime> DevOrganisationsShiftTimes
        {
            get
            {
                return this.GetTable<DevOrganisationsShiftTime>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this.GetTable<DevOrganisationsStaff>();
            }
        }

        public Devart.Data.Linq.Table<DevOrganisationsStaffsBankDetail> DevOrganisationsStaffsBankDetails
        {
            get
            {
                return this.GetTable<DevOrganisationsStaffsBankDetail>();
            }
        }

        public Devart.Data.Linq.Table<EmpApplyJobDetail> EmpApplyJobDetails
        {
            get
            {
                return this.GetTable<EmpApplyJobDetail>();
            }
        }

        public Devart.Data.Linq.Table<EmpBookmarkJobsDetail> EmpBookmarkJobsDetails
        {
            get
            {
                return this.GetTable<EmpBookmarkJobsDetail>();
            }
        }

        public Devart.Data.Linq.Table<EmpResumeAbout> EmpResumeAbouts
        {
            get
            {
                return this.GetTable<EmpResumeAbout>();
            }
        }

        public Devart.Data.Linq.Table<EmpResumeEducation> EmpResumeEducations
        {
            get
            {
                return this.GetTable<EmpResumeEducation>();
            }
        }

        public Devart.Data.Linq.Table<EmpResumeOtherCertificate> EmpResumeOtherCertificates
        {
            get
            {
                return this.GetTable<EmpResumeOtherCertificate>();
            }
        }

        public Devart.Data.Linq.Table<EmpResumeSkill> EmpResumeSkills
        {
            get
            {
                return this.GetTable<EmpResumeSkill>();
            }
        }

        public Devart.Data.Linq.Table<EmpResumeWorkExperience> EmpResumeWorkExperiences
        {
            get
            {
                return this.GetTable<EmpResumeWorkExperience>();
            }
        }

        public Devart.Data.Linq.Table<EmprJob> EmprJobs
        {
            get
            {
                return this.GetTable<EmprJob>();
            }
        }

        public Devart.Data.Linq.Table<EmprJobSkill> EmprJobSkills
        {
            get
            {
                return this.GetTable<EmprJobSkill>();
            }
        }

        public Devart.Data.Linq.Table<EmprJobType> EmprJobTypes
        {
            get
            {
                return this.GetTable<EmprJobType>();
            }
        }

        public Devart.Data.Linq.Table<OrgStaffsAttendancesDaily> OrgStaffsAttendancesDailies
        {
            get
            {
                return this.GetTable<OrgStaffsAttendancesDaily>();
            }
        }

        public Devart.Data.Linq.Table<OrgStaffsLeaveApplication> OrgStaffsLeaveApplications
        {
            get
            {
                return this.GetTable<OrgStaffsLeaveApplication>();
            }
        }

        public Devart.Data.Linq.Table<SubFixedLookup> SubFixedLookups
        {
            get
            {
                return this.GetTable<SubFixedLookup>();
            }
        }

        public Devart.Data.Linq.Table<SubLookup> SubLookups
        {
            get
            {
                return this.GetTable<SubLookup>();
            }
        }

        public Devart.Data.Linq.Table<SubOTP> SubOTPs
        {
            get
            {
                return this.GetTable<SubOTP>();
            }
        }

        public Devart.Data.Linq.Table<SubRoleController> SubRoleControllers
        {
            get
            {
                return this.GetTable<SubRoleController>();
            }
        }

        public Devart.Data.Linq.Table<SubRole> SubRoles
        {
            get
            {
                return this.GetTable<SubRole>();
            }
        }

        public Devart.Data.Linq.Table<SubUserOrganisation> SubUserOrganisations
        {
            get
            {
                return this.GetTable<SubUserOrganisation>();
            }
        }

        public Devart.Data.Linq.Table<SubUserToken> SubUserTokens
        {
            get
            {
                return this.GetTable<SubUserToken>();
            }
        }

        public Devart.Data.Linq.Table<SubUser> SubUsers
        {
            get
            {
                return this.GetTable<SubUser>();
            }
        }

        public Devart.Data.Linq.Table<SubUsersDetail> SubUsersDetails
        {
            get
            {
                return this.GetTable<SubUsersDetail>();
            }
        }

        public Devart.Data.Linq.Table<SubUsersIdentity> SubUsersIdentities
        {
            get
            {
                return this.GetTable<SubUsersIdentity>();
            }
        }

        public Devart.Data.Linq.Table<SubUsersTotalworkexperience> SubUsersTotalworkexperiences
        {
            get
            {
                return this.GetTable<SubUsersTotalworkexperience>();
            }
        }
    }
}

namespace HisabKaroDBContext
{

    /// <summary>
    /// There are no comments for HisabKaroDBContext.CommonContactAddress in the schema.
    /// </summary>
    [Table(Name = @"dbo.common_Contact_Addresses")]
    public partial class CommonContactAddress : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ContactAddressId;

        private string _AddressLine1;

        private string _AddressLine2;

        private string _City;

        private string _State;

        private int? _PinCode;

        private string _Landmark;
        #pragma warning restore 0649

        private EntitySet<DevOrganisationBranch> _DevOrganisationBranches;

        private EntitySet<DevOrganisation> _DevOrganisations;

        private EntitySet<SubUsersDetail> _SubUsersDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnContactAddressIdChanging(int value);
        partial void OnContactAddressIdChanged();
        partial void OnAddressLine1Changing(string value);
        partial void OnAddressLine1Changed();
        partial void OnAddressLine2Changing(string value);
        partial void OnAddressLine2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnPinCodeChanging(int? value);
        partial void OnPinCodeChanged();
        partial void OnLandmarkChanging(string value);
        partial void OnLandmarkChanged();
        #endregion

        public CommonContactAddress()
        {
            this._DevOrganisationBranches = new EntitySet<DevOrganisationBranch>(new Action<DevOrganisationBranch>(this.attach_DevOrganisationBranches), new Action<DevOrganisationBranch>(this.detach_DevOrganisationBranches));
            this._DevOrganisations = new EntitySet<DevOrganisation>(new Action<DevOrganisation>(this.attach_DevOrganisations), new Action<DevOrganisation>(this.detach_DevOrganisations));
            this._SubUsersDetails = new EntitySet<SubUsersDetail>(new Action<SubUsersDetail>(this.attach_SubUsersDetails), new Action<SubUsersDetail>(this.detach_SubUsersDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ContactAddressId in the schema.
        /// </summary>
        [Column(Storage = "_ContactAddressId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ContactAddressId
        {
            get
            {
                return this._ContactAddressId;
            }
            set
            {
                if (this._ContactAddressId != value)
                {
                    this.OnContactAddressIdChanging(value);
                    this.SendPropertyChanging("ContactAddressId");
                    this._ContactAddressId = value;
                    this.SendPropertyChanged("ContactAddressId");
                    this.OnContactAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressLine1 in the schema.
        /// </summary>
        [Column(Storage = "_AddressLine1", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string AddressLine1
        {
            get
            {
                return this._AddressLine1;
            }
            set
            {
                if (this._AddressLine1 != value)
                {
                    this.OnAddressLine1Changing(value);
                    this.SendPropertyChanging("AddressLine1");
                    this._AddressLine1 = value;
                    this.SendPropertyChanged("AddressLine1");
                    this.OnAddressLine1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressLine2 in the schema.
        /// </summary>
        [Column(Storage = "_AddressLine2", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string AddressLine2
        {
            get
            {
                return this._AddressLine2;
            }
            set
            {
                if (this._AddressLine2 != value)
                {
                    this.OnAddressLine2Changing(value);
                    this.SendPropertyChanging("AddressLine2");
                    this._AddressLine2 = value;
                    this.SendPropertyChanged("AddressLine2");
                    this.OnAddressLine2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [Column(Storage = "_State", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging("State");
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PinCode in the schema.
        /// </summary>
        [Column(Storage = "_PinCode", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? PinCode
        {
            get
            {
                return this._PinCode;
            }
            set
            {
                if (this._PinCode != value)
                {
                    this.OnPinCodeChanging(value);
                    this.SendPropertyChanging("PinCode");
                    this._PinCode = value;
                    this.SendPropertyChanged("PinCode");
                    this.OnPinCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Landmark in the schema.
        /// </summary>
        [Column(Storage = "_Landmark", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Landmark
        {
            get
            {
                return this._Landmark;
            }
            set
            {
                if (this._Landmark != value)
                {
                    this.OnLandmarkChanging(value);
                    this.SendPropertyChanging("Landmark");
                    this._Landmark = value;
                    this.SendPropertyChanged("Landmark");
                    this.OnLandmarkChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranches in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonContactAddress_DevOrganisationBranch", Storage="_DevOrganisationBranches", ThisKey="ContactAddressId", OtherKey="ContactAddressId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationBranch> DevOrganisationBranches
        {
            get
            {
                return this._DevOrganisationBranches;
            }
            set
            {
                this._DevOrganisationBranches.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonContactAddress_DevOrganisation", Storage="_DevOrganisations", ThisKey="ContactAddressId", OtherKey="ContactAddressId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisation> DevOrganisations
        {
            get
            {
                return this._DevOrganisations;
            }
            set
            {
                this._DevOrganisations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonContactAddress_SubUsersDetail", Storage="_SubUsersDetails", ThisKey="ContactAddressId", OtherKey="AddressID", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersDetail> SubUsersDetails
        {
            get
            {
                return this._SubUsersDetails;
            }
            set
            {
                this._SubUsersDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationBranches(DevOrganisationBranch entity)
        {
            this.SendPropertyChanging("DevOrganisationBranches");
            entity.CommonContactAddress = this;
        }
    
        private void detach_DevOrganisationBranches(DevOrganisationBranch entity)
        {
            this.SendPropertyChanging("DevOrganisationBranches");
            entity.CommonContactAddress = null;
        }

        private void attach_DevOrganisations(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations");
            entity.CommonContactAddress = this;
        }
    
        private void detach_DevOrganisations(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations");
            entity.CommonContactAddress = null;
        }

        private void attach_SubUsersDetails(SubUsersDetail entity)
        {
            this.SendPropertyChanging("SubUsersDetails");
            entity.CommonContactAddress = this;
        }
    
        private void detach_SubUsersDetails(SubUsersDetail entity)
        {
            this.SendPropertyChanging("SubUsersDetails");
            entity.CommonContactAddress = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.CommonFile in the schema.
    /// </summary>
    [Table(Name = @"dbo.common_Files")]
    public partial class CommonFile : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FileId;

        private string _FileType;

        private string _FilePath;

        private string _FileSize;

        private string _FGUID;
        #pragma warning restore 0649

        private EntitySet<DevOrganisation> _DevOrganisations_PANFileId;

        private EntitySet<DevOrganisation> _DevOrganisations_GSTFileId;

        private EntitySet<DevOrganisation> _DevOrganisations_LogoFileId;

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs;

        private EntitySet<EmpResumeOtherCertificate> _EmpResumeOtherCertificates;

        private EntitySet<EmprJob> _EmprJobs;

        private EntitySet<SubUsersDetail> _SubUsersDetails;

        private EntitySet<SubUsersIdentity> _SubUsersIdentities_AadharBackFileId;

        private EntitySet<SubUsersIdentity> _SubUsersIdentities_AadharFrontFileId;

        private EntitySet<SubUsersIdentity> _SubUsersIdentities_PanFileId;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFileIdChanging(int value);
        partial void OnFileIdChanged();
        partial void OnFileTypeChanging(string value);
        partial void OnFileTypeChanged();
        partial void OnFilePathChanging(string value);
        partial void OnFilePathChanged();
        partial void OnFileSizeChanging(string value);
        partial void OnFileSizeChanged();
        partial void OnFGUIDChanging(string value);
        partial void OnFGUIDChanged();
        #endregion

        public CommonFile()
        {
            this._DevOrganisations_PANFileId = new EntitySet<DevOrganisation>(new Action<DevOrganisation>(this.attach_DevOrganisations_PANFileId), new Action<DevOrganisation>(this.detach_DevOrganisations_PANFileId));
            this._DevOrganisations_GSTFileId = new EntitySet<DevOrganisation>(new Action<DevOrganisation>(this.attach_DevOrganisations_GSTFileId), new Action<DevOrganisation>(this.detach_DevOrganisations_GSTFileId));
            this._DevOrganisations_LogoFileId = new EntitySet<DevOrganisation>(new Action<DevOrganisation>(this.attach_DevOrganisations_LogoFileId), new Action<DevOrganisation>(this.detach_DevOrganisations_LogoFileId));
            this._DevOrganisationsStaffs = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs));
            this._EmpResumeOtherCertificates = new EntitySet<EmpResumeOtherCertificate>(new Action<EmpResumeOtherCertificate>(this.attach_EmpResumeOtherCertificates), new Action<EmpResumeOtherCertificate>(this.detach_EmpResumeOtherCertificates));
            this._EmprJobs = new EntitySet<EmprJob>(new Action<EmprJob>(this.attach_EmprJobs), new Action<EmprJob>(this.detach_EmprJobs));
            this._SubUsersDetails = new EntitySet<SubUsersDetail>(new Action<SubUsersDetail>(this.attach_SubUsersDetails), new Action<SubUsersDetail>(this.detach_SubUsersDetails));
            this._SubUsersIdentities_AadharBackFileId = new EntitySet<SubUsersIdentity>(new Action<SubUsersIdentity>(this.attach_SubUsersIdentities_AadharBackFileId), new Action<SubUsersIdentity>(this.detach_SubUsersIdentities_AadharBackFileId));
            this._SubUsersIdentities_AadharFrontFileId = new EntitySet<SubUsersIdentity>(new Action<SubUsersIdentity>(this.attach_SubUsersIdentities_AadharFrontFileId), new Action<SubUsersIdentity>(this.detach_SubUsersIdentities_AadharFrontFileId));
            this._SubUsersIdentities_PanFileId = new EntitySet<SubUsersIdentity>(new Action<SubUsersIdentity>(this.attach_SubUsersIdentities_PanFileId), new Action<SubUsersIdentity>(this.detach_SubUsersIdentities_PanFileId));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FileId in the schema.
        /// </summary>
        [Column(Storage = "_FileId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FileId
        {
            get
            {
                return this._FileId;
            }
            set
            {
                if (this._FileId != value)
                {
                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging("FileId");
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileType in the schema.
        /// </summary>
        [Column(Storage = "_FileType", DbType = "VARCHAR(8)", UpdateCheck = UpdateCheck.Never)]
        public string FileType
        {
            get
            {
                return this._FileType;
            }
            set
            {
                if (this._FileType != value)
                {
                    this.OnFileTypeChanging(value);
                    this.SendPropertyChanging("FileType");
                    this._FileType = value;
                    this.SendPropertyChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilePath in the schema.
        /// </summary>
        [Column(Storage = "_FilePath", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string FilePath
        {
            get
            {
                return this._FilePath;
            }
            set
            {
                if (this._FilePath != value)
                {
                    this.OnFilePathChanging(value);
                    this.SendPropertyChanging("FilePath");
                    this._FilePath = value;
                    this.SendPropertyChanged("FilePath");
                    this.OnFilePathChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileSize in the schema.
        /// </summary>
        [Column(Storage = "_FileSize", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string FileSize
        {
            get
            {
                return this._FileSize;
            }
            set
            {
                if (this._FileSize != value)
                {
                    this.OnFileSizeChanging(value);
                    this.SendPropertyChanging("FileSize");
                    this._FileSize = value;
                    this.SendPropertyChanged("FileSize");
                    this.OnFileSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FGUID in the schema.
        /// </summary>
        [Column(Storage = "_FGUID", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string FGUID
        {
            get
            {
                return this._FGUID;
            }
            set
            {
                if (this._FGUID != value)
                {
                    this.OnFGUIDChanging(value);
                    this.SendPropertyChanging("FGUID");
                    this._FGUID = value;
                    this.SendPropertyChanged("FGUID");
                    this.OnFGUIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisations_PANFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisation", Storage="_DevOrganisations_PANFileId", ThisKey="FileId", OtherKey="PANFileId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisation> DevOrganisations_PANFileId
        {
            get
            {
                return this._DevOrganisations_PANFileId;
            }
            set
            {
                this._DevOrganisations_PANFileId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisations_GSTFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisation1", Storage="_DevOrganisations_GSTFileId", ThisKey="FileId", OtherKey="GSTFileId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisation> DevOrganisations_GSTFileId
        {
            get
            {
                return this._DevOrganisations_GSTFileId;
            }
            set
            {
                this._DevOrganisations_GSTFileId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisations_LogoFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisation2", Storage="_DevOrganisations_LogoFileId", ThisKey="FileId", OtherKey="LogoFileId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisation> DevOrganisations_LogoFileId
        {
            get
            {
                return this._DevOrganisations_LogoFileId;
            }
            set
            {
                this._DevOrganisations_LogoFileId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs", ThisKey="FileId", OtherKey="ProfileFileId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this._DevOrganisationsStaffs;
            }
            set
            {
                this._DevOrganisationsStaffs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeOtherCertificates in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_EmpResumeOtherCertificate", Storage="_EmpResumeOtherCertificates", ThisKey="FileId", OtherKey="CertificateFileId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeOtherCertificate> EmpResumeOtherCertificates
        {
            get
            {
                return this._EmpResumeOtherCertificates;
            }
            set
            {
                this._EmpResumeOtherCertificates.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJobs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_EmprJob", Storage="_EmprJobs", ThisKey="FileId", OtherKey="FileId", DeleteRule="NO ACTION")]
        public EntitySet<EmprJob> EmprJobs
        {
            get
            {
                return this._EmprJobs;
            }
            set
            {
                this._EmprJobs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersDetail", Storage="_SubUsersDetails", ThisKey="FileId", OtherKey="FileId", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersDetail> SubUsersDetails
        {
            get
            {
                return this._SubUsersDetails;
            }
            set
            {
                this._SubUsersDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersIdentities_AadharBackFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersIdentity", Storage="_SubUsersIdentities_AadharBackFileId", ThisKey="FileId", OtherKey="AadharBackFileId", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersIdentity> SubUsersIdentities_AadharBackFileId
        {
            get
            {
                return this._SubUsersIdentities_AadharBackFileId;
            }
            set
            {
                this._SubUsersIdentities_AadharBackFileId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersIdentities_AadharFrontFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersIdentity1", Storage="_SubUsersIdentities_AadharFrontFileId", ThisKey="FileId", OtherKey="AadharFrontFileId", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersIdentity> SubUsersIdentities_AadharFrontFileId
        {
            get
            {
                return this._SubUsersIdentities_AadharFrontFileId;
            }
            set
            {
                this._SubUsersIdentities_AadharFrontFileId.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersIdentities_PanFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersIdentity2", Storage="_SubUsersIdentities_PanFileId", ThisKey="FileId", OtherKey="PanFileId", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersIdentity> SubUsersIdentities_PanFileId
        {
            get
            {
                return this._SubUsersIdentities_PanFileId;
            }
            set
            {
                this._SubUsersIdentities_PanFileId.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisations_PANFileId(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations_PANFileId");
            entity.CommonFile_PANFileId = this;
        }
    
        private void detach_DevOrganisations_PANFileId(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations_PANFileId");
            entity.CommonFile_PANFileId = null;
        }

        private void attach_DevOrganisations_GSTFileId(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations_GSTFileId");
            entity.CommonFile_GSTFileId = this;
        }
    
        private void detach_DevOrganisations_GSTFileId(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations_GSTFileId");
            entity.CommonFile_GSTFileId = null;
        }

        private void attach_DevOrganisations_LogoFileId(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations_LogoFileId");
            entity.CommonFile_LogoFileId = this;
        }
    
        private void detach_DevOrganisations_LogoFileId(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations_LogoFileId");
            entity.CommonFile_LogoFileId = null;
        }

        private void attach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.CommonFile = this;
        }
    
        private void detach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.CommonFile = null;
        }

        private void attach_EmpResumeOtherCertificates(EmpResumeOtherCertificate entity)
        {
            this.SendPropertyChanging("EmpResumeOtherCertificates");
            entity.CommonFile = this;
        }
    
        private void detach_EmpResumeOtherCertificates(EmpResumeOtherCertificate entity)
        {
            this.SendPropertyChanging("EmpResumeOtherCertificates");
            entity.CommonFile = null;
        }

        private void attach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.CommonFile = this;
        }
    
        private void detach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.CommonFile = null;
        }

        private void attach_SubUsersDetails(SubUsersDetail entity)
        {
            this.SendPropertyChanging("SubUsersDetails");
            entity.CommonFile = this;
        }
    
        private void detach_SubUsersDetails(SubUsersDetail entity)
        {
            this.SendPropertyChanging("SubUsersDetails");
            entity.CommonFile = null;
        }

        private void attach_SubUsersIdentities_AadharBackFileId(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities_AadharBackFileId");
            entity.CommonFile_AadharBackFileId = this;
        }
    
        private void detach_SubUsersIdentities_AadharBackFileId(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities_AadharBackFileId");
            entity.CommonFile_AadharBackFileId = null;
        }

        private void attach_SubUsersIdentities_AadharFrontFileId(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities_AadharFrontFileId");
            entity.CommonFile_AadharFrontFileId = this;
        }
    
        private void detach_SubUsersIdentities_AadharFrontFileId(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities_AadharFrontFileId");
            entity.CommonFile_AadharFrontFileId = null;
        }

        private void attach_SubUsersIdentities_PanFileId(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities_PanFileId");
            entity.CommonFile_PanFileId = this;
        }
    
        private void detach_SubUsersIdentities_PanFileId(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities_PanFileId");
            entity.CommonFile_PanFileId = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevController in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Controllers")]
    public partial class DevController : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CId;

        private int _ControllerTypeId;

        private string _ControllerName;

        private string _DisplayName;

        private bool? _IsVisible;

        private string _ChildControllers;
        #pragma warning restore 0649

        private EntityRef<DevControllerType> _DevControllerType;

        private EntitySet<SubRoleController> _SubRoleControllers;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCIdChanging(int value);
        partial void OnCIdChanged();
        partial void OnControllerTypeIdChanging(int value);
        partial void OnControllerTypeIdChanged();
        partial void OnControllerNameChanging(string value);
        partial void OnControllerNameChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnIsVisibleChanging(bool? value);
        partial void OnIsVisibleChanged();
        partial void OnChildControllersChanging(string value);
        partial void OnChildControllersChanged();
        #endregion

        public DevController()
        {
            this._DevControllerType  = default(EntityRef<DevControllerType>);
            this._SubRoleControllers = new EntitySet<SubRoleController>(new Action<SubRoleController>(this.attach_SubRoleControllers), new Action<SubRoleController>(this.detach_SubRoleControllers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CId in the schema.
        /// </summary>
        [Column(Storage = "_CId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int CId
        {
            get
            {
                return this._CId;
            }
            set
            {
                if (this._CId != value)
                {
                    this.OnCIdChanging(value);
                    this.SendPropertyChanging("CId");
                    this._CId = value;
                    this.SendPropertyChanged("CId");
                    this.OnCIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControllerTypeId in the schema.
        /// </summary>
        [Column(Storage = "_ControllerTypeId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ControllerTypeId
        {
            get
            {
                return this._ControllerTypeId;
            }
            set
            {
                if (this._ControllerTypeId != value)
                {
                    if (this._DevControllerType.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnControllerTypeIdChanging(value);
                    this.SendPropertyChanging("ControllerTypeId");
                    this._ControllerTypeId = value;
                    this.SendPropertyChanged("ControllerTypeId");
                    this.OnControllerTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControllerName in the schema.
        /// </summary>
        [Column(Storage = "_ControllerName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ControllerName
        {
            get
            {
                return this._ControllerName;
            }
            set
            {
                if (this._ControllerName != value)
                {
                    this.OnControllerNameChanging(value);
                    this.SendPropertyChanging("ControllerName");
                    this._ControllerName = value;
                    this.SendPropertyChanged("ControllerName");
                    this.OnControllerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DisplayName in the schema.
        /// </summary>
        [Column(Storage = "_DisplayName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this.OnDisplayNameChanging(value);
                    this.SendPropertyChanging("DisplayName");
                    this._DisplayName = value;
                    this.SendPropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsVisible in the schema.
        /// </summary>
        [Column(Storage = "_IsVisible", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? IsVisible
        {
            get
            {
                return this._IsVisible;
            }
            set
            {
                if (this._IsVisible != value)
                {
                    this.OnIsVisibleChanging(value);
                    this.SendPropertyChanging("IsVisible");
                    this._IsVisible = value;
                    this.SendPropertyChanged("IsVisible");
                    this.OnIsVisibleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChildControllers in the schema.
        /// </summary>
        [Column(Storage = "_ChildControllers", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string ChildControllers
        {
            get
            {
                return this._ChildControllers;
            }
            set
            {
                if (this._ChildControllers != value)
                {
                    this.OnChildControllersChanging(value);
                    this.SendPropertyChanging("ChildControllers");
                    this._ChildControllers = value;
                    this.SendPropertyChanged("ChildControllers");
                    this.OnChildControllersChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevControllerType in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevControllerType_DevController", Storage="_DevControllerType", ThisKey="ControllerTypeId", OtherKey="ControllerTypeId", IsForeignKey=true)]
        public DevControllerType DevControllerType
        {
            get
            {
                return this._DevControllerType.Entity;
            }
            set
            {
                DevControllerType previousValue = this._DevControllerType.Entity;
                if ((previousValue != value) || (this._DevControllerType.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevControllerType");
                    if (previousValue != null)
                    {
                        this._DevControllerType.Entity = null;
                        previousValue.DevControllers.Remove(this);
                    }
                    this._DevControllerType.Entity = value;
                    if (value != null)
                    {
                        this._ControllerTypeId = value.ControllerTypeId;
                        value.DevControllers.Add(this);
                    }
                    else
                    {
                        this._ControllerTypeId = default(int);
                    }
                    this.SendPropertyChanged("DevControllerType");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubRoleControllers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevController_SubRoleController", Storage="_SubRoleControllers", ThisKey="CId", OtherKey="CId", DeleteRule="NO ACTION")]
        public EntitySet<SubRoleController> SubRoleControllers
        {
            get
            {
                return this._SubRoleControllers;
            }
            set
            {
                this._SubRoleControllers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SubRoleControllers(SubRoleController entity)
        {
            this.SendPropertyChanging("SubRoleControllers");
            entity.DevController = this;
        }
    
        private void detach_SubRoleControllers(SubRoleController entity)
        {
            this.SendPropertyChanging("SubRoleControllers");
            entity.DevController = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevControllerType in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_ControllerTypes")]
    public partial class DevControllerType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ControllerTypeId;

        private string _ControllerType;
        #pragma warning restore 0649

        private EntitySet<DevController> _DevControllers;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnControllerTypeIdChanging(int value);
        partial void OnControllerTypeIdChanged();
        partial void OnControllerTypeChanging(string value);
        partial void OnControllerTypeChanged();
        #endregion

        public DevControllerType()
        {
            this._DevControllers = new EntitySet<DevController>(new Action<DevController>(this.attach_DevControllers), new Action<DevController>(this.detach_DevControllers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ControllerTypeId in the schema.
        /// </summary>
        [Column(Storage = "_ControllerTypeId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ControllerTypeId
        {
            get
            {
                return this._ControllerTypeId;
            }
            set
            {
                if (this._ControllerTypeId != value)
                {
                    this.OnControllerTypeIdChanging(value);
                    this.SendPropertyChanging("ControllerTypeId");
                    this._ControllerTypeId = value;
                    this.SendPropertyChanged("ControllerTypeId");
                    this.OnControllerTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ControllerType in the schema.
        /// </summary>
        [Column(Storage = "_ControllerType", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ControllerType
        {
            get
            {
                return this._ControllerType;
            }
            set
            {
                if (this._ControllerType != value)
                {
                    this.OnControllerTypeChanging(value);
                    this.SendPropertyChanging("ControllerType");
                    this._ControllerType = value;
                    this.SendPropertyChanged("ControllerType");
                    this.OnControllerTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevControllers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevControllerType_DevController", Storage="_DevControllers", ThisKey="ControllerTypeId", OtherKey="ControllerTypeId", DeleteRule="NO ACTION")]
        public EntitySet<DevController> DevControllers
        {
            get
            {
                return this._DevControllers;
            }
            set
            {
                this._DevControllers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevControllers(DevController entity)
        {
            this.SendPropertyChanging("DevControllers");
            entity.DevControllerType = this;
        }
    
        private void detach_DevControllers(DevController entity)
        {
            this.SendPropertyChanging("DevControllers");
            entity.DevControllerType = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisationBranch in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisation_Branches")]
    public partial class DevOrganisationBranch : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BranchId;

        private string _BranchName;

        private int? _OId;

        private decimal? _Longitude;

        private decimal? _Latitude;

        private int? _ContactAddressId;

        private int? _UId;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        private EntityRef<DevOrganisation> _DevOrganisation;

        private EntityRef<CommonContactAddress> _CommonContactAddress;

        private EntitySet<DevOrganisationsBranchesShiftTime> _DevOrganisationsBranchesShiftTimes;

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs;

        private EntitySet<EmpApplyJobDetail> _EmpApplyJobDetails;

        private EntitySet<EmpBookmarkJobsDetail> _EmpBookmarkJobsDetails;

        private EntitySet<EmprJob> _EmprJobs;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBranchIdChanging(int value);
        partial void OnBranchIdChanged();
        partial void OnBranchNameChanging(string value);
        partial void OnBranchNameChanged();
        partial void OnOIdChanging(int? value);
        partial void OnOIdChanged();
        partial void OnLongitudeChanging(decimal? value);
        partial void OnLongitudeChanged();
        partial void OnLatitudeChanging(decimal? value);
        partial void OnLatitudeChanged();
        partial void OnContactAddressIdChanging(int? value);
        partial void OnContactAddressIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        #endregion

        public DevOrganisationBranch()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            this._CommonContactAddress  = default(EntityRef<CommonContactAddress>);
            this._DevOrganisationsBranchesShiftTimes = new EntitySet<DevOrganisationsBranchesShiftTime>(new Action<DevOrganisationsBranchesShiftTime>(this.attach_DevOrganisationsBranchesShiftTimes), new Action<DevOrganisationsBranchesShiftTime>(this.detach_DevOrganisationsBranchesShiftTimes));
            this._DevOrganisationsStaffs = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs));
            this._EmpApplyJobDetails = new EntitySet<EmpApplyJobDetail>(new Action<EmpApplyJobDetail>(this.attach_EmpApplyJobDetails), new Action<EmpApplyJobDetail>(this.detach_EmpApplyJobDetails));
            this._EmpBookmarkJobsDetails = new EntitySet<EmpBookmarkJobsDetail>(new Action<EmpBookmarkJobsDetail>(this.attach_EmpBookmarkJobsDetails), new Action<EmpBookmarkJobsDetail>(this.detach_EmpBookmarkJobsDetails));
            this._EmprJobs = new EntitySet<EmprJob>(new Action<EmprJob>(this.attach_EmprJobs), new Action<EmprJob>(this.detach_EmprJobs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Storage = "_BranchId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchName in the schema.
        /// </summary>
        [Column(Storage = "_BranchName", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string BranchName
        {
            get
            {
                return this._BranchName;
            }
            set
            {
                if (this._BranchName != value)
                {
                    this.OnBranchNameChanging(value);
                    this.SendPropertyChanging("BranchName");
                    this._BranchName = value;
                    this.SendPropertyChanged("BranchName");
                    this.OnBranchNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "DECIMAL(9,6)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging("Longitude");
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "DECIMAL(9,6)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging("Latitude");
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactAddressId in the schema.
        /// </summary>
        [Column(Storage = "_ContactAddressId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ContactAddressId
        {
            get
            {
                return this._ContactAddressId;
            }
            set
            {
                if (this._ContactAddressId != value)
                {
                    if (this._CommonContactAddress.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactAddressIdChanging(value);
                    this.SendPropertyChanging("ContactAddressId");
                    this._ContactAddressId = value;
                    this.SendPropertyChanged("ContactAddressId");
                    this.OnContactAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_DevOrganisationBranch", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.DevOrganisationBranches.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.DevOrganisationBranches.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationBranch", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.DevOrganisationBranches.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.DevOrganisationBranches.Add(this);
                    }
                    else
                    {
                        this._OId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonContactAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonContactAddress_DevOrganisationBranch", Storage="_CommonContactAddress", ThisKey="ContactAddressId", OtherKey="ContactAddressId", IsForeignKey=true)]
        public CommonContactAddress CommonContactAddress
        {
            get
            {
                return this._CommonContactAddress.Entity;
            }
            set
            {
                CommonContactAddress previousValue = this._CommonContactAddress.Entity;
                if ((previousValue != value) || (this._CommonContactAddress.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonContactAddress");
                    if (previousValue != null)
                    {
                        this._CommonContactAddress.Entity = null;
                        previousValue.DevOrganisationBranches.Remove(this);
                    }
                    this._CommonContactAddress.Entity = value;
                    if (value != null)
                    {
                        this._ContactAddressId = value.ContactAddressId;
                        value.DevOrganisationBranches.Add(this);
                    }
                    else
                    {
                        this._ContactAddressId = default(int?);
                    }
                    this.SendPropertyChanged("CommonContactAddress");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsBranchesShiftTimes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_DevOrganisationsBranchesShiftTime", Storage="_DevOrganisationsBranchesShiftTimes", ThisKey="BranchId", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsBranchesShiftTime> DevOrganisationsBranchesShiftTimes
        {
            get
            {
                return this._DevOrganisationsBranchesShiftTimes;
            }
            set
            {
                this._DevOrganisationsBranchesShiftTimes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs", ThisKey="BranchId", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this._DevOrganisationsStaffs;
            }
            set
            {
                this._DevOrganisationsStaffs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpApplyJobDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_EmpApplyJobDetail", Storage="_EmpApplyJobDetails", ThisKey="BranchId", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<EmpApplyJobDetail> EmpApplyJobDetails
        {
            get
            {
                return this._EmpApplyJobDetails;
            }
            set
            {
                this._EmpApplyJobDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpBookmarkJobsDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_EmpBookmarkJobsDetail", Storage="_EmpBookmarkJobsDetails", ThisKey="BranchId", OtherKey="BranchId", DeleteRule="NO ACTION")]
        public EntitySet<EmpBookmarkJobsDetail> EmpBookmarkJobsDetails
        {
            get
            {
                return this._EmpBookmarkJobsDetails;
            }
            set
            {
                this._EmpBookmarkJobsDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJobs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_EmprJob", Storage="_EmprJobs", ThisKey="BranchId", OtherKey="BranchID", DeleteRule="NO ACTION")]
        public EntitySet<EmprJob> EmprJobs
        {
            get
            {
                return this._EmprJobs;
            }
            set
            {
                this._EmprJobs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationsBranchesShiftTimes(DevOrganisationsBranchesShiftTime entity)
        {
            this.SendPropertyChanging("DevOrganisationsBranchesShiftTimes");
            entity.DevOrganisationBranch = this;
        }
    
        private void detach_DevOrganisationsBranchesShiftTimes(DevOrganisationsBranchesShiftTime entity)
        {
            this.SendPropertyChanging("DevOrganisationsBranchesShiftTimes");
            entity.DevOrganisationBranch = null;
        }

        private void attach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisationBranch = this;
        }
    
        private void detach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisationBranch = null;
        }

        private void attach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.DevOrganisationBranch = this;
        }
    
        private void detach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.DevOrganisationBranch = null;
        }

        private void attach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.DevOrganisationBranch = this;
        }
    
        private void detach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.DevOrganisationBranch = null;
        }

        private void attach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.DevOrganisationBranch = this;
        }
    
        private void detach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.DevOrganisationBranch = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisation in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisations")]
    public partial class DevOrganisation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OId;

        private string _OrganisationName;

        private int? _InudstrySectorId;

        private string _Email;

        private string _MobileNumber;

        private int? _UId;

        private int? _ContactAddressId;

        private int? _PANFileId;

        private string _PAN;

        private int? _GSTFileId;

        private string _GSTIN;

        private int? _LogoFileId;

        private decimal? _Latitude;

        private decimal? _Longitude;
        #pragma warning restore 0649

        private EntitySet<DevOrganisationBranch> _DevOrganisationBranches;

        private EntityRef<CommonContactAddress> _CommonContactAddress;

        private EntityRef<SubUser> _SubUser;

        private EntityRef<CommonFile> _CommonFile_PANFileId;

        private EntityRef<CommonFile> _CommonFile_GSTFileId;

        private EntityRef<CommonFile> _CommonFile_LogoFileId;

        private EntityRef<SubFixedLookup> _SubFixedLookup;

        private EntitySet<DevOrganisationsBranchesShiftTime> _DevOrganisationsBranchesShiftTimes;

        private EntitySet<DevOrganisationsPartner> _DevOrganisationsPartners;

        private EntitySet<DevOrganisationsShiftTime> _DevOrganisationsShiftTimes;

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs;

        private EntitySet<EmpApplyJobDetail> _EmpApplyJobDetails;

        private EntitySet<EmpBookmarkJobsDetail> _EmpBookmarkJobsDetails;

        private EntitySet<EmprJob> _EmprJobs;

        private EntitySet<SubRole> _SubRoles;

        private EntitySet<SubUserOrganisation> _SubUserOrganisations;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOIdChanging(int value);
        partial void OnOIdChanged();
        partial void OnOrganisationNameChanging(string value);
        partial void OnOrganisationNameChanged();
        partial void OnInudstrySectorIdChanging(int? value);
        partial void OnInudstrySectorIdChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnMobileNumberChanging(string value);
        partial void OnMobileNumberChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnContactAddressIdChanging(int? value);
        partial void OnContactAddressIdChanged();
        partial void OnPANFileIdChanging(int? value);
        partial void OnPANFileIdChanged();
        partial void OnPANChanging(string value);
        partial void OnPANChanged();
        partial void OnGSTFileIdChanging(int? value);
        partial void OnGSTFileIdChanged();
        partial void OnGSTINChanging(string value);
        partial void OnGSTINChanged();
        partial void OnLogoFileIdChanging(int? value);
        partial void OnLogoFileIdChanged();
        partial void OnLatitudeChanging(decimal? value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(decimal? value);
        partial void OnLongitudeChanged();
        #endregion

        public DevOrganisation()
        {
            this._DevOrganisationBranches = new EntitySet<DevOrganisationBranch>(new Action<DevOrganisationBranch>(this.attach_DevOrganisationBranches), new Action<DevOrganisationBranch>(this.detach_DevOrganisationBranches));
            this._CommonContactAddress  = default(EntityRef<CommonContactAddress>);
            this._SubUser  = default(EntityRef<SubUser>);
            this._CommonFile_PANFileId  = default(EntityRef<CommonFile>);
            this._CommonFile_GSTFileId  = default(EntityRef<CommonFile>);
            this._CommonFile_LogoFileId  = default(EntityRef<CommonFile>);
            this._SubFixedLookup  = default(EntityRef<SubFixedLookup>);
            this._DevOrganisationsBranchesShiftTimes = new EntitySet<DevOrganisationsBranchesShiftTime>(new Action<DevOrganisationsBranchesShiftTime>(this.attach_DevOrganisationsBranchesShiftTimes), new Action<DevOrganisationsBranchesShiftTime>(this.detach_DevOrganisationsBranchesShiftTimes));
            this._DevOrganisationsPartners = new EntitySet<DevOrganisationsPartner>(new Action<DevOrganisationsPartner>(this.attach_DevOrganisationsPartners), new Action<DevOrganisationsPartner>(this.detach_DevOrganisationsPartners));
            this._DevOrganisationsShiftTimes = new EntitySet<DevOrganisationsShiftTime>(new Action<DevOrganisationsShiftTime>(this.attach_DevOrganisationsShiftTimes), new Action<DevOrganisationsShiftTime>(this.detach_DevOrganisationsShiftTimes));
            this._DevOrganisationsStaffs = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs));
            this._EmpApplyJobDetails = new EntitySet<EmpApplyJobDetail>(new Action<EmpApplyJobDetail>(this.attach_EmpApplyJobDetails), new Action<EmpApplyJobDetail>(this.detach_EmpApplyJobDetails));
            this._EmpBookmarkJobsDetails = new EntitySet<EmpBookmarkJobsDetail>(new Action<EmpBookmarkJobsDetail>(this.attach_EmpBookmarkJobsDetails), new Action<EmpBookmarkJobsDetail>(this.detach_EmpBookmarkJobsDetails));
            this._EmprJobs = new EntitySet<EmprJob>(new Action<EmprJob>(this.attach_EmprJobs), new Action<EmprJob>(this.detach_EmprJobs));
            this._SubRoles = new EntitySet<SubRole>(new Action<SubRole>(this.attach_SubRoles), new Action<SubRole>(this.detach_SubRoles));
            this._SubUserOrganisations = new EntitySet<SubUserOrganisation>(new Action<SubUserOrganisation>(this.attach_SubUserOrganisations), new Action<SubUserOrganisation>(this.detach_SubUserOrganisations));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrganisationName in the schema.
        /// </summary>
        [Column(Storage = "_OrganisationName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string OrganisationName
        {
            get
            {
                return this._OrganisationName;
            }
            set
            {
                if (this._OrganisationName != value)
                {
                    this.OnOrganisationNameChanging(value);
                    this.SendPropertyChanging("OrganisationName");
                    this._OrganisationName = value;
                    this.SendPropertyChanged("OrganisationName");
                    this.OnOrganisationNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InudstrySectorId in the schema.
        /// </summary>
        [Column(Storage = "_InudstrySectorId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? InudstrySectorId
        {
            get
            {
                return this._InudstrySectorId;
            }
            set
            {
                if (this._InudstrySectorId != value)
                {
                    if (this._SubFixedLookup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnInudstrySectorIdChanging(value);
                    this.SendPropertyChanging("InudstrySectorId");
                    this._InudstrySectorId = value;
                    this.SendPropertyChanged("InudstrySectorId");
                    this.OnInudstrySectorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MobileNumber in the schema.
        /// </summary>
        [Column(Storage = "_MobileNumber", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string MobileNumber
        {
            get
            {
                return this._MobileNumber;
            }
            set
            {
                if (this._MobileNumber != value)
                {
                    this.OnMobileNumberChanging(value);
                    this.SendPropertyChanging("MobileNumber");
                    this._MobileNumber = value;
                    this.SendPropertyChanged("MobileNumber");
                    this.OnMobileNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContactAddressId in the schema.
        /// </summary>
        [Column(Storage = "_ContactAddressId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ContactAddressId
        {
            get
            {
                return this._ContactAddressId;
            }
            set
            {
                if (this._ContactAddressId != value)
                {
                    if (this._CommonContactAddress.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactAddressIdChanging(value);
                    this.SendPropertyChanging("ContactAddressId");
                    this._ContactAddressId = value;
                    this.SendPropertyChanged("ContactAddressId");
                    this.OnContactAddressIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PANFileId in the schema.
        /// </summary>
        [Column(Storage = "_PANFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? PANFileId
        {
            get
            {
                return this._PANFileId;
            }
            set
            {
                if (this._PANFileId != value)
                {
                    if (this._CommonFile_PANFileId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPANFileIdChanging(value);
                    this.SendPropertyChanging("PANFileId");
                    this._PANFileId = value;
                    this.SendPropertyChanged("PANFileId");
                    this.OnPANFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PAN in the schema.
        /// </summary>
        [Column(Storage = "_PAN", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PAN
        {
            get
            {
                return this._PAN;
            }
            set
            {
                if (this._PAN != value)
                {
                    this.OnPANChanging(value);
                    this.SendPropertyChanging("PAN");
                    this._PAN = value;
                    this.SendPropertyChanged("PAN");
                    this.OnPANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GSTFileId in the schema.
        /// </summary>
        [Column(Storage = "_GSTFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? GSTFileId
        {
            get
            {
                return this._GSTFileId;
            }
            set
            {
                if (this._GSTFileId != value)
                {
                    if (this._CommonFile_GSTFileId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGSTFileIdChanging(value);
                    this.SendPropertyChanging("GSTFileId");
                    this._GSTFileId = value;
                    this.SendPropertyChanged("GSTFileId");
                    this.OnGSTFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GSTIN in the schema.
        /// </summary>
        [Column(Storage = "_GSTIN", DbType = "VARCHAR(15)", UpdateCheck = UpdateCheck.Never)]
        public string GSTIN
        {
            get
            {
                return this._GSTIN;
            }
            set
            {
                if (this._GSTIN != value)
                {
                    this.OnGSTINChanging(value);
                    this.SendPropertyChanging("GSTIN");
                    this._GSTIN = value;
                    this.SendPropertyChanged("GSTIN");
                    this.OnGSTINChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LogoFileId in the schema.
        /// </summary>
        [Column(Storage = "_LogoFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LogoFileId
        {
            get
            {
                return this._LogoFileId;
            }
            set
            {
                if (this._LogoFileId != value)
                {
                    if (this._CommonFile_LogoFileId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLogoFileIdChanging(value);
                    this.SendPropertyChanging("LogoFileId");
                    this._LogoFileId = value;
                    this.SendPropertyChanged("LogoFileId");
                    this.OnLogoFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Latitude in the schema.
        /// </summary>
        [Column(Storage = "_Latitude", DbType = "DECIMAL(9,6)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Latitude
        {
            get
            {
                return this._Latitude;
            }
            set
            {
                if (this._Latitude != value)
                {
                    this.OnLatitudeChanging(value);
                    this.SendPropertyChanging("Latitude");
                    this._Latitude = value;
                    this.SendPropertyChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Longitude in the schema.
        /// </summary>
        [Column(Storage = "_Longitude", DbType = "DECIMAL(9,6)", UpdateCheck = UpdateCheck.Never)]
        public decimal? Longitude
        {
            get
            {
                return this._Longitude;
            }
            set
            {
                if (this._Longitude != value)
                {
                    this.OnLongitudeChanging(value);
                    this.SendPropertyChanging("Longitude");
                    this._Longitude = value;
                    this.SendPropertyChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranches in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationBranch", Storage="_DevOrganisationBranches", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationBranch> DevOrganisationBranches
        {
            get
            {
                return this._DevOrganisationBranches;
            }
            set
            {
                this._DevOrganisationBranches.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CommonContactAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonContactAddress_DevOrganisation", Storage="_CommonContactAddress", ThisKey="ContactAddressId", OtherKey="ContactAddressId", IsForeignKey=true)]
        public CommonContactAddress CommonContactAddress
        {
            get
            {
                return this._CommonContactAddress.Entity;
            }
            set
            {
                CommonContactAddress previousValue = this._CommonContactAddress.Entity;
                if ((previousValue != value) || (this._CommonContactAddress.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonContactAddress");
                    if (previousValue != null)
                    {
                        this._CommonContactAddress.Entity = null;
                        previousValue.DevOrganisations.Remove(this);
                    }
                    this._CommonContactAddress.Entity = value;
                    if (value != null)
                    {
                        this._ContactAddressId = value.ContactAddressId;
                        value.DevOrganisations.Add(this);
                    }
                    else
                    {
                        this._ContactAddressId = default(int?);
                    }
                    this.SendPropertyChanged("CommonContactAddress");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_DevOrganisation", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.DevOrganisations.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.DevOrganisations.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile_PANFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisation", Storage="_CommonFile_PANFileId", ThisKey="PANFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile_PANFileId
        {
            get
            {
                return this._CommonFile_PANFileId.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile_PANFileId.Entity;
                if ((previousValue != value) || (this._CommonFile_PANFileId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile_PANFileId");
                    if (previousValue != null)
                    {
                        this._CommonFile_PANFileId.Entity = null;
                        previousValue.DevOrganisations_PANFileId.Remove(this);
                    }
                    this._CommonFile_PANFileId.Entity = value;
                    if (value != null)
                    {
                        this._PANFileId = value.FileId;
                        value.DevOrganisations_PANFileId.Add(this);
                    }
                    else
                    {
                        this._PANFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile_PANFileId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile_GSTFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisation1", Storage="_CommonFile_GSTFileId", ThisKey="GSTFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile_GSTFileId
        {
            get
            {
                return this._CommonFile_GSTFileId.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile_GSTFileId.Entity;
                if ((previousValue != value) || (this._CommonFile_GSTFileId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile_GSTFileId");
                    if (previousValue != null)
                    {
                        this._CommonFile_GSTFileId.Entity = null;
                        previousValue.DevOrganisations_GSTFileId.Remove(this);
                    }
                    this._CommonFile_GSTFileId.Entity = value;
                    if (value != null)
                    {
                        this._GSTFileId = value.FileId;
                        value.DevOrganisations_GSTFileId.Add(this);
                    }
                    else
                    {
                        this._GSTFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile_GSTFileId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile_LogoFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisation2", Storage="_CommonFile_LogoFileId", ThisKey="LogoFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile_LogoFileId
        {
            get
            {
                return this._CommonFile_LogoFileId.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile_LogoFileId.Entity;
                if ((previousValue != value) || (this._CommonFile_LogoFileId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile_LogoFileId");
                    if (previousValue != null)
                    {
                        this._CommonFile_LogoFileId.Entity = null;
                        previousValue.DevOrganisations_LogoFileId.Remove(this);
                    }
                    this._CommonFile_LogoFileId.Entity = value;
                    if (value != null)
                    {
                        this._LogoFileId = value.FileId;
                        value.DevOrganisations_LogoFileId.Add(this);
                    }
                    else
                    {
                        this._LogoFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile_LogoFileId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubFixedLookup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_DevOrganisation", Storage="_SubFixedLookup", ThisKey="InudstrySectorId", OtherKey="FixedLookupId", IsForeignKey=true)]
        public SubFixedLookup SubFixedLookup
        {
            get
            {
                return this._SubFixedLookup.Entity;
            }
            set
            {
                SubFixedLookup previousValue = this._SubFixedLookup.Entity;
                if ((previousValue != value) || (this._SubFixedLookup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubFixedLookup");
                    if (previousValue != null)
                    {
                        this._SubFixedLookup.Entity = null;
                        previousValue.DevOrganisations.Remove(this);
                    }
                    this._SubFixedLookup.Entity = value;
                    if (value != null)
                    {
                        this._InudstrySectorId = value.FixedLookupId;
                        value.DevOrganisations.Add(this);
                    }
                    else
                    {
                        this._InudstrySectorId = default(int?);
                    }
                    this.SendPropertyChanged("SubFixedLookup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsBranchesShiftTimes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsBranchesShiftTime", Storage="_DevOrganisationsBranchesShiftTimes", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsBranchesShiftTime> DevOrganisationsBranchesShiftTimes
        {
            get
            {
                return this._DevOrganisationsBranchesShiftTimes;
            }
            set
            {
                this._DevOrganisationsBranchesShiftTimes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsPartners in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsPartner", Storage="_DevOrganisationsPartners", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsPartner> DevOrganisationsPartners
        {
            get
            {
                return this._DevOrganisationsPartners;
            }
            set
            {
                this._DevOrganisationsPartners.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsShiftTimes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsShiftTime", Storage="_DevOrganisationsShiftTimes", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsShiftTime> DevOrganisationsShiftTimes
        {
            get
            {
                return this._DevOrganisationsShiftTimes;
            }
            set
            {
                this._DevOrganisationsShiftTimes.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this._DevOrganisationsStaffs;
            }
            set
            {
                this._DevOrganisationsStaffs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpApplyJobDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_EmpApplyJobDetail", Storage="_EmpApplyJobDetails", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<EmpApplyJobDetail> EmpApplyJobDetails
        {
            get
            {
                return this._EmpApplyJobDetails;
            }
            set
            {
                this._EmpApplyJobDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpBookmarkJobsDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_EmpBookmarkJobsDetail", Storage="_EmpBookmarkJobsDetails", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<EmpBookmarkJobsDetail> EmpBookmarkJobsDetails
        {
            get
            {
                return this._EmpBookmarkJobsDetails;
            }
            set
            {
                this._EmpBookmarkJobsDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJobs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_EmprJob", Storage="_EmprJobs", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<EmprJob> EmprJobs
        {
            get
            {
                return this._EmprJobs;
            }
            set
            {
                this._EmprJobs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubRoles in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_SubRole", Storage="_SubRoles", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<SubRole> SubRoles
        {
            get
            {
                return this._SubRoles;
            }
            set
            {
                this._SubRoles.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUserOrganisations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_SubUserOrganisation", Storage="_SubUserOrganisations", ThisKey="OId", OtherKey="OId", DeleteRule="NO ACTION")]
        public EntitySet<SubUserOrganisation> SubUserOrganisations
        {
            get
            {
                return this._SubUserOrganisations;
            }
            set
            {
                this._SubUserOrganisations.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationBranches(DevOrganisationBranch entity)
        {
            this.SendPropertyChanging("DevOrganisationBranches");
            entity.DevOrganisation = this;
        }
    
        private void detach_DevOrganisationBranches(DevOrganisationBranch entity)
        {
            this.SendPropertyChanging("DevOrganisationBranches");
            entity.DevOrganisation = null;
        }

        private void attach_DevOrganisationsBranchesShiftTimes(DevOrganisationsBranchesShiftTime entity)
        {
            this.SendPropertyChanging("DevOrganisationsBranchesShiftTimes");
            entity.DevOrganisation = this;
        }
    
        private void detach_DevOrganisationsBranchesShiftTimes(DevOrganisationsBranchesShiftTime entity)
        {
            this.SendPropertyChanging("DevOrganisationsBranchesShiftTimes");
            entity.DevOrganisation = null;
        }

        private void attach_DevOrganisationsPartners(DevOrganisationsPartner entity)
        {
            this.SendPropertyChanging("DevOrganisationsPartners");
            entity.DevOrganisation = this;
        }
    
        private void detach_DevOrganisationsPartners(DevOrganisationsPartner entity)
        {
            this.SendPropertyChanging("DevOrganisationsPartners");
            entity.DevOrganisation = null;
        }

        private void attach_DevOrganisationsShiftTimes(DevOrganisationsShiftTime entity)
        {
            this.SendPropertyChanging("DevOrganisationsShiftTimes");
            entity.DevOrganisation = this;
        }
    
        private void detach_DevOrganisationsShiftTimes(DevOrganisationsShiftTime entity)
        {
            this.SendPropertyChanging("DevOrganisationsShiftTimes");
            entity.DevOrganisation = null;
        }

        private void attach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisation = this;
        }
    
        private void detach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisation = null;
        }

        private void attach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.DevOrganisation = this;
        }
    
        private void detach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.DevOrganisation = null;
        }

        private void attach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.DevOrganisation = this;
        }
    
        private void detach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.DevOrganisation = null;
        }

        private void attach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.DevOrganisation = this;
        }
    
        private void detach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.DevOrganisation = null;
        }

        private void attach_SubRoles(SubRole entity)
        {
            this.SendPropertyChanging("SubRoles");
            entity.DevOrganisation = this;
        }
    
        private void detach_SubRoles(SubRole entity)
        {
            this.SendPropertyChanging("SubRoles");
            entity.DevOrganisation = null;
        }

        private void attach_SubUserOrganisations(SubUserOrganisation entity)
        {
            this.SendPropertyChanging("SubUserOrganisations");
            entity.DevOrganisation = this;
        }
    
        private void detach_SubUserOrganisations(SubUserOrganisation entity)
        {
            this.SendPropertyChanging("SubUserOrganisations");
            entity.DevOrganisation = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisationsBranchesShiftTime in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisations_Branches_ShiftTimes")]
    public partial class DevOrganisationsBranchesShiftTime : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ShiftTimeId;

        private int _OId;

        private System.TimeSpan _StartTime;

        private System.TimeSpan _EndTime;

        private System.TimeSpan? _MarkLate;

        private int _BranchId;
        #pragma warning restore 0649

        private EntityRef<DevOrganisationBranch> _DevOrganisationBranch;

        private EntityRef<DevOrganisation> _DevOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShiftTimeIdChanging(int value);
        partial void OnShiftTimeIdChanged();
        partial void OnOIdChanging(int value);
        partial void OnOIdChanged();
        partial void OnStartTimeChanging(System.TimeSpan value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.TimeSpan value);
        partial void OnEndTimeChanged();
        partial void OnMarkLateChanging(System.TimeSpan? value);
        partial void OnMarkLateChanged();
        partial void OnBranchIdChanging(int value);
        partial void OnBranchIdChanged();
        #endregion

        public DevOrganisationsBranchesShiftTime()
        {
            this._DevOrganisationBranch  = default(EntityRef<DevOrganisationBranch>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShiftTimeId in the schema.
        /// </summary>
        [Column(Storage = "_ShiftTimeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ShiftTimeId
        {
            get
            {
                return this._ShiftTimeId;
            }
            set
            {
                if (this._ShiftTimeId != value)
                {
                    this.OnShiftTimeIdChanging(value);
                    this.SendPropertyChanging("ShiftTimeId");
                    this._ShiftTimeId = value;
                    this.SendPropertyChanged("ShiftTimeId");
                    this.OnShiftTimeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Storage = "_StartTime", CanBeNull = false, DbType = "TIME(0) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging("StartTime");
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Storage = "_EndTime", CanBeNull = false, DbType = "TIME(0) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging("EndTime");
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MarkLate in the schema.
        /// </summary>
        [Column(Storage = "_MarkLate", DbType = "TIME(0)", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan? MarkLate
        {
            get
            {
                return this._MarkLate;
            }
            set
            {
                if (this._MarkLate != value)
                {
                    this.OnMarkLateChanging(value);
                    this.SendPropertyChanging("MarkLate");
                    this._MarkLate = value;
                    this.SendPropertyChanged("MarkLate");
                    this.OnMarkLateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Storage = "_BranchId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._DevOrganisationBranch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_DevOrganisationsBranchesShiftTime", Storage="_DevOrganisationBranch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
        public DevOrganisationBranch DevOrganisationBranch
        {
            get
            {
                return this._DevOrganisationBranch.Entity;
            }
            set
            {
                DevOrganisationBranch previousValue = this._DevOrganisationBranch.Entity;
                if ((previousValue != value) || (this._DevOrganisationBranch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationBranch");
                    if (previousValue != null)
                    {
                        this._DevOrganisationBranch.Entity = null;
                        previousValue.DevOrganisationsBranchesShiftTimes.Remove(this);
                    }
                    this._DevOrganisationBranch.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.BranchId;
                        value.DevOrganisationsBranchesShiftTimes.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisationBranch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsBranchesShiftTime", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.DevOrganisationsBranchesShiftTimes.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.DevOrganisationsBranchesShiftTimes.Add(this);
                    }
                    else
                    {
                        this._OId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisationsPartner in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisations_Partners")]
    public partial class DevOrganisationsPartner : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PId;

        private int? _OId;

        private int? _OwnershipTypeId;

        private string _Email;

        private string _MobleNumber;
        #pragma warning restore 0649

        private EntityRef<DevOrganisation> _DevOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPIdChanging(int value);
        partial void OnPIdChanged();
        partial void OnOIdChanging(int? value);
        partial void OnOIdChanged();
        partial void OnOwnershipTypeIdChanging(int? value);
        partial void OnOwnershipTypeIdChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnMobleNumberChanging(string value);
        partial void OnMobleNumberChanged();
        #endregion

        public DevOrganisationsPartner()
        {
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PId in the schema.
        /// </summary>
        [Column(Storage = "_PId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int PId
        {
            get
            {
                return this._PId;
            }
            set
            {
                if (this._PId != value)
                {
                    this.OnPIdChanging(value);
                    this.SendPropertyChanging("PId");
                    this._PId = value;
                    this.SendPropertyChanged("PId");
                    this.OnPIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OwnershipTypeId in the schema.
        /// </summary>
        [Column(Storage = "_OwnershipTypeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OwnershipTypeId
        {
            get
            {
                return this._OwnershipTypeId;
            }
            set
            {
                if (this._OwnershipTypeId != value)
                {
                    this.OnOwnershipTypeIdChanging(value);
                    this.SendPropertyChanging("OwnershipTypeId");
                    this._OwnershipTypeId = value;
                    this.SendPropertyChanged("OwnershipTypeId");
                    this.OnOwnershipTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MobleNumber in the schema.
        /// </summary>
        [Column(Storage = "_MobleNumber", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string MobleNumber
        {
            get
            {
                return this._MobleNumber;
            }
            set
            {
                if (this._MobleNumber != value)
                {
                    this.OnMobleNumberChanging(value);
                    this.SendPropertyChanging("MobleNumber");
                    this._MobleNumber = value;
                    this.SendPropertyChanged("MobleNumber");
                    this.OnMobleNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsPartner", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.DevOrganisationsPartners.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.DevOrganisationsPartners.Add(this);
                    }
                    else
                    {
                        this._OId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisationsShiftTime in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisations_ShiftTimes")]
    public partial class DevOrganisationsShiftTime : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ShiftTimeId;

        private int _OId;

        private System.TimeSpan _StartTime;

        private System.TimeSpan _EndTime;

        private System.TimeSpan? _MarkLate;
        #pragma warning restore 0649

        private EntityRef<DevOrganisation> _DevOrganisation;

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnShiftTimeIdChanging(int value);
        partial void OnShiftTimeIdChanged();
        partial void OnOIdChanging(int value);
        partial void OnOIdChanged();
        partial void OnStartTimeChanging(System.TimeSpan value);
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.TimeSpan value);
        partial void OnEndTimeChanged();
        partial void OnMarkLateChanging(System.TimeSpan? value);
        partial void OnMarkLateChanged();
        #endregion

        public DevOrganisationsShiftTime()
        {
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            this._DevOrganisationsStaffs = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ShiftTimeId in the schema.
        /// </summary>
        [Column(Storage = "_ShiftTimeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ShiftTimeId
        {
            get
            {
                return this._ShiftTimeId;
            }
            set
            {
                if (this._ShiftTimeId != value)
                {
                    this.OnShiftTimeIdChanging(value);
                    this.SendPropertyChanging("ShiftTimeId");
                    this._ShiftTimeId = value;
                    this.SendPropertyChanged("ShiftTimeId");
                    this.OnShiftTimeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartTime in the schema.
        /// </summary>
        [Column(Storage = "_StartTime", CanBeNull = false, DbType = "TIME(0) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this.SendPropertyChanging("StartTime");
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndTime in the schema.
        /// </summary>
        [Column(Storage = "_EndTime", CanBeNull = false, DbType = "TIME(0) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this.SendPropertyChanging("EndTime");
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MarkLate in the schema.
        /// </summary>
        [Column(Storage = "_MarkLate", DbType = "TIME(0)", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan? MarkLate
        {
            get
            {
                return this._MarkLate;
            }
            set
            {
                if (this._MarkLate != value)
                {
                    this.OnMarkLateChanging(value);
                    this.SendPropertyChanging("MarkLate");
                    this._MarkLate = value;
                    this.SendPropertyChanged("MarkLate");
                    this.OnMarkLateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsShiftTime", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.DevOrganisationsShiftTimes.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.DevOrganisationsShiftTimes.Add(this);
                    }
                    else
                    {
                        this._OId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationsShiftTime_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs", ThisKey="ShiftTimeId", OtherKey="ShiftTimeId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this._DevOrganisationsStaffs;
            }
            set
            {
                this._DevOrganisationsStaffs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisationsShiftTime = this;
        }
    
        private void detach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisationsShiftTime = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisationsStaff in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisations_Staffs")]
    public partial class DevOrganisationsStaff : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _StaffId;

        private int _OId;

        private int _URId;

        private int? _BranchId;

        private int? _ShiftTimeId;

        private bool _IsOnenWeek;

        private double _Salary;

        private int? _WeekOffOneDay;

        private int? _WeekOffSecondDay;

        private System.DateTime? _DOB;

        private string _Gender;

        private int? _ProfileFileId;

        private int? _BankDetailId;
        #pragma warning restore 0649

        private EntityRef<DevOrganisationsShiftTime> _DevOrganisationsShiftTime;

        private EntityRef<DevOrganisationsStaffsBankDetail> _DevOrganisationsStaffsBankDetail;

        private EntityRef<DevOrganisationBranch> _DevOrganisationBranch;

        private EntityRef<CommonFile> _CommonFile;

        private EntityRef<SubFixedLookup> _SubFixedLookup_WeekOffOneDay;

        private EntityRef<SubFixedLookup> _SubFixedLookup_WeekOffSecondDay;

        private EntityRef<DevOrganisation> _DevOrganisation;

        private EntityRef<SubUserOrganisation> _SubUserOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnStaffIdChanging(int value);
        partial void OnStaffIdChanged();
        partial void OnOIdChanging(int value);
        partial void OnOIdChanged();
        partial void OnURIdChanging(int value);
        partial void OnURIdChanged();
        partial void OnBranchIdChanging(int? value);
        partial void OnBranchIdChanged();
        partial void OnShiftTimeIdChanging(int? value);
        partial void OnShiftTimeIdChanged();
        partial void OnIsOnenWeekChanging(bool value);
        partial void OnIsOnenWeekChanged();
        partial void OnSalaryChanging(double value);
        partial void OnSalaryChanged();
        partial void OnWeekOffOneDayChanging(int? value);
        partial void OnWeekOffOneDayChanged();
        partial void OnWeekOffSecondDayChanging(int? value);
        partial void OnWeekOffSecondDayChanged();
        partial void OnDOBChanging(System.DateTime? value);
        partial void OnDOBChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnProfileFileIdChanging(int? value);
        partial void OnProfileFileIdChanged();
        partial void OnBankDetailIdChanging(int? value);
        partial void OnBankDetailIdChanged();
        #endregion

        public DevOrganisationsStaff()
        {
            this._DevOrganisationsShiftTime  = default(EntityRef<DevOrganisationsShiftTime>);
            this._DevOrganisationsStaffsBankDetail  = default(EntityRef<DevOrganisationsStaffsBankDetail>);
            this._DevOrganisationBranch  = default(EntityRef<DevOrganisationBranch>);
            this._CommonFile  = default(EntityRef<CommonFile>);
            this._SubFixedLookup_WeekOffOneDay  = default(EntityRef<SubFixedLookup>);
            this._SubFixedLookup_WeekOffSecondDay  = default(EntityRef<SubFixedLookup>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            this._SubUserOrganisation  = default(EntityRef<SubUserOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for StaffId in the schema.
        /// </summary>
        [Column(Storage = "_StaffId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int StaffId
        {
            get
            {
                return this._StaffId;
            }
            set
            {
                if (this._StaffId != value)
                {
                    this.OnStaffIdChanging(value);
                    this.SendPropertyChanging("StaffId");
                    this._StaffId = value;
                    this.SendPropertyChanged("StaffId");
                    this.OnStaffIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for URId in the schema.
        /// </summary>
        [Column(Storage = "_URId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int URId
        {
            get
            {
                return this._URId;
            }
            set
            {
                if (this._URId != value)
                {
                    if (this._SubUserOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnURIdChanging(value);
                    this.SendPropertyChanging("URId");
                    this._URId = value;
                    this.SendPropertyChanged("URId");
                    this.OnURIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Storage = "_BranchId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._DevOrganisationBranch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ShiftTimeId in the schema.
        /// </summary>
        [Column(Storage = "_ShiftTimeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ShiftTimeId
        {
            get
            {
                return this._ShiftTimeId;
            }
            set
            {
                if (this._ShiftTimeId != value)
                {
                    if (this._DevOrganisationsShiftTime.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShiftTimeIdChanging(value);
                    this.SendPropertyChanging("ShiftTimeId");
                    this._ShiftTimeId = value;
                    this.SendPropertyChanged("ShiftTimeId");
                    this.OnShiftTimeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsOnenWeek in the schema.
        /// </summary>
        [Column(Storage = "_IsOnenWeek", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsOnenWeek
        {
            get
            {
                return this._IsOnenWeek;
            }
            set
            {
                if (this._IsOnenWeek != value)
                {
                    this.OnIsOnenWeekChanging(value);
                    this.SendPropertyChanging("IsOnenWeek");
                    this._IsOnenWeek = value;
                    this.SendPropertyChanged("IsOnenWeek");
                    this.OnIsOnenWeekChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salary in the schema.
        /// </summary>
        [Column(Storage = "_Salary", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Salary
        {
            get
            {
                return this._Salary;
            }
            set
            {
                if (this._Salary != value)
                {
                    this.OnSalaryChanging(value);
                    this.SendPropertyChanging("Salary");
                    this._Salary = value;
                    this.SendPropertyChanged("Salary");
                    this.OnSalaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeekOffOneDay in the schema.
        /// </summary>
        [Column(Storage = "_WeekOffOneDay", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? WeekOffOneDay
        {
            get
            {
                return this._WeekOffOneDay;
            }
            set
            {
                if (this._WeekOffOneDay != value)
                {
                    if (this._SubFixedLookup_WeekOffOneDay.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWeekOffOneDayChanging(value);
                    this.SendPropertyChanging("WeekOffOneDay");
                    this._WeekOffOneDay = value;
                    this.SendPropertyChanged("WeekOffOneDay");
                    this.OnWeekOffOneDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WeekOffSecondDay in the schema.
        /// </summary>
        [Column(Storage = "_WeekOffSecondDay", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? WeekOffSecondDay
        {
            get
            {
                return this._WeekOffSecondDay;
            }
            set
            {
                if (this._WeekOffSecondDay != value)
                {
                    if (this._SubFixedLookup_WeekOffSecondDay.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnWeekOffSecondDayChanging(value);
                    this.SendPropertyChanging("WeekOffSecondDay");
                    this._WeekOffSecondDay = value;
                    this.SendPropertyChanged("WeekOffSecondDay");
                    this.OnWeekOffSecondDayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOB in the schema.
        /// </summary>
        [Column(Storage = "_DOB", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DOB
        {
            get
            {
                return this._DOB;
            }
            set
            {
                if (this._DOB != value)
                {
                    this.OnDOBChanging(value);
                    this.SendPropertyChanging("DOB");
                    this._DOB = value;
                    this.SendPropertyChanged("DOB");
                    this.OnDOBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gender in the schema.
        /// </summary>
        [Column(Storage = "_Gender", DbType = "VARCHAR(6)", UpdateCheck = UpdateCheck.Never)]
        public string Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if (this._Gender != value)
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging("Gender");
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileFileId in the schema.
        /// </summary>
        [Column(Storage = "_ProfileFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? ProfileFileId
        {
            get
            {
                return this._ProfileFileId;
            }
            set
            {
                if (this._ProfileFileId != value)
                {
                    if (this._CommonFile.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProfileFileIdChanging(value);
                    this.SendPropertyChanging("ProfileFileId");
                    this._ProfileFileId = value;
                    this.SendPropertyChanged("ProfileFileId");
                    this.OnProfileFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankDetailId in the schema.
        /// </summary>
        [Column(Storage = "_BankDetailId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? BankDetailId
        {
            get
            {
                return this._BankDetailId;
            }
            set
            {
                if (this._BankDetailId != value)
                {
                    if (this._DevOrganisationsStaffsBankDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBankDetailIdChanging(value);
                    this.SendPropertyChanging("BankDetailId");
                    this._BankDetailId = value;
                    this.SendPropertyChanged("BankDetailId");
                    this.OnBankDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsShiftTime in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationsShiftTime_DevOrganisationsStaff", Storage="_DevOrganisationsShiftTime", ThisKey="ShiftTimeId", OtherKey="ShiftTimeId", IsForeignKey=true)]
        public DevOrganisationsShiftTime DevOrganisationsShiftTime
        {
            get
            {
                return this._DevOrganisationsShiftTime.Entity;
            }
            set
            {
                DevOrganisationsShiftTime previousValue = this._DevOrganisationsShiftTime.Entity;
                if ((previousValue != value) || (this._DevOrganisationsShiftTime.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationsShiftTime");
                    if (previousValue != null)
                    {
                        this._DevOrganisationsShiftTime.Entity = null;
                        previousValue.DevOrganisationsStaffs.Remove(this);
                    }
                    this._DevOrganisationsShiftTime.Entity = value;
                    if (value != null)
                    {
                        this._ShiftTimeId = value.ShiftTimeId;
                        value.DevOrganisationsStaffs.Add(this);
                    }
                    else
                    {
                        this._ShiftTimeId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisationsShiftTime");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffsBankDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationsStaffsBankDetail_DevOrganisationsStaff", Storage="_DevOrganisationsStaffsBankDetail", ThisKey="BankDetailId", OtherKey="BankDetailId", IsForeignKey=true)]
        public DevOrganisationsStaffsBankDetail DevOrganisationsStaffsBankDetail
        {
            get
            {
                return this._DevOrganisationsStaffsBankDetail.Entity;
            }
            set
            {
                DevOrganisationsStaffsBankDetail previousValue = this._DevOrganisationsStaffsBankDetail.Entity;
                if ((previousValue != value) || (this._DevOrganisationsStaffsBankDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationsStaffsBankDetail");
                    if (previousValue != null)
                    {
                        this._DevOrganisationsStaffsBankDetail.Entity = null;
                        previousValue.DevOrganisationsStaffs.Remove(this);
                    }
                    this._DevOrganisationsStaffsBankDetail.Entity = value;
                    if (value != null)
                    {
                        this._BankDetailId = value.BankDetailId;
                        value.DevOrganisationsStaffs.Add(this);
                    }
                    else
                    {
                        this._BankDetailId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisationsStaffsBankDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_DevOrganisationsStaff", Storage="_DevOrganisationBranch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
        public DevOrganisationBranch DevOrganisationBranch
        {
            get
            {
                return this._DevOrganisationBranch.Entity;
            }
            set
            {
                DevOrganisationBranch previousValue = this._DevOrganisationBranch.Entity;
                if ((previousValue != value) || (this._DevOrganisationBranch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationBranch");
                    if (previousValue != null)
                    {
                        this._DevOrganisationBranch.Entity = null;
                        previousValue.DevOrganisationsStaffs.Remove(this);
                    }
                    this._DevOrganisationBranch.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.BranchId;
                        value.DevOrganisationsStaffs.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisationBranch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_DevOrganisationsStaff", Storage="_CommonFile", ThisKey="ProfileFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile
        {
            get
            {
                return this._CommonFile.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile.Entity;
                if ((previousValue != value) || (this._CommonFile.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile");
                    if (previousValue != null)
                    {
                        this._CommonFile.Entity = null;
                        previousValue.DevOrganisationsStaffs.Remove(this);
                    }
                    this._CommonFile.Entity = value;
                    if (value != null)
                    {
                        this._ProfileFileId = value.FileId;
                        value.DevOrganisationsStaffs.Add(this);
                    }
                    else
                    {
                        this._ProfileFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubFixedLookup_WeekOffOneDay in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_DevOrganisationsStaff", Storage="_SubFixedLookup_WeekOffOneDay", ThisKey="WeekOffOneDay", OtherKey="FixedLookupId", IsForeignKey=true)]
        public SubFixedLookup SubFixedLookup_WeekOffOneDay
        {
            get
            {
                return this._SubFixedLookup_WeekOffOneDay.Entity;
            }
            set
            {
                SubFixedLookup previousValue = this._SubFixedLookup_WeekOffOneDay.Entity;
                if ((previousValue != value) || (this._SubFixedLookup_WeekOffOneDay.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubFixedLookup_WeekOffOneDay");
                    if (previousValue != null)
                    {
                        this._SubFixedLookup_WeekOffOneDay.Entity = null;
                        previousValue.DevOrganisationsStaffs_WeekOffOneDay.Remove(this);
                    }
                    this._SubFixedLookup_WeekOffOneDay.Entity = value;
                    if (value != null)
                    {
                        this._WeekOffOneDay = value.FixedLookupId;
                        value.DevOrganisationsStaffs_WeekOffOneDay.Add(this);
                    }
                    else
                    {
                        this._WeekOffOneDay = default(int?);
                    }
                    this.SendPropertyChanged("SubFixedLookup_WeekOffOneDay");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubFixedLookup_WeekOffSecondDay in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_DevOrganisationsStaff1", Storage="_SubFixedLookup_WeekOffSecondDay", ThisKey="WeekOffSecondDay", OtherKey="FixedLookupId", IsForeignKey=true)]
        public SubFixedLookup SubFixedLookup_WeekOffSecondDay
        {
            get
            {
                return this._SubFixedLookup_WeekOffSecondDay.Entity;
            }
            set
            {
                SubFixedLookup previousValue = this._SubFixedLookup_WeekOffSecondDay.Entity;
                if ((previousValue != value) || (this._SubFixedLookup_WeekOffSecondDay.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubFixedLookup_WeekOffSecondDay");
                    if (previousValue != null)
                    {
                        this._SubFixedLookup_WeekOffSecondDay.Entity = null;
                        previousValue.DevOrganisationsStaffs_WeekOffSecondDay.Remove(this);
                    }
                    this._SubFixedLookup_WeekOffSecondDay.Entity = value;
                    if (value != null)
                    {
                        this._WeekOffSecondDay = value.FixedLookupId;
                        value.DevOrganisationsStaffs_WeekOffSecondDay.Add(this);
                    }
                    else
                    {
                        this._WeekOffSecondDay = default(int?);
                    }
                    this.SendPropertyChanged("SubFixedLookup_WeekOffSecondDay");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_DevOrganisationsStaff", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.DevOrganisationsStaffs.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.DevOrganisationsStaffs.Add(this);
                    }
                    else
                    {
                        this._OId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUserOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUserOrganisation_DevOrganisationsStaff", Storage="_SubUserOrganisation", ThisKey="URId", OtherKey="URId", IsForeignKey=true)]
        public SubUserOrganisation SubUserOrganisation
        {
            get
            {
                return this._SubUserOrganisation.Entity;
            }
            set
            {
                SubUserOrganisation previousValue = this._SubUserOrganisation.Entity;
                if ((previousValue != value) || (this._SubUserOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUserOrganisation");
                    if (previousValue != null)
                    {
                        this._SubUserOrganisation.Entity = null;
                        previousValue.DevOrganisationsStaffs.Remove(this);
                    }
                    this._SubUserOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._URId = value.URId;
                        value.DevOrganisationsStaffs.Add(this);
                    }
                    else
                    {
                        this._URId = default(int);
                    }
                    this.SendPropertyChanged("SubUserOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.DevOrganisationsStaffsBankDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.dev_Organisations_Staffs_BankDetails")]
    public partial class DevOrganisationsStaffsBankDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BankDetailId;

        private string _BankName;

        private string _AccountNumber;

        private string _IFSCCode;

        private string _UPI;
        #pragma warning restore 0649

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBankDetailIdChanging(int value);
        partial void OnBankDetailIdChanged();
        partial void OnBankNameChanging(string value);
        partial void OnBankNameChanged();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        partial void OnIFSCCodeChanging(string value);
        partial void OnIFSCCodeChanged();
        partial void OnUPIChanging(string value);
        partial void OnUPIChanged();
        #endregion

        public DevOrganisationsStaffsBankDetail()
        {
            this._DevOrganisationsStaffs = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BankDetailId in the schema.
        /// </summary>
        [Column(Storage = "_BankDetailId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BankDetailId
        {
            get
            {
                return this._BankDetailId;
            }
            set
            {
                if (this._BankDetailId != value)
                {
                    this.OnBankDetailIdChanging(value);
                    this.SendPropertyChanging("BankDetailId");
                    this._BankDetailId = value;
                    this.SendPropertyChanged("BankDetailId");
                    this.OnBankDetailIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BankName in the schema.
        /// </summary>
        [Column(Storage = "_BankName", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string BankName
        {
            get
            {
                return this._BankName;
            }
            set
            {
                if (this._BankName != value)
                {
                    this.OnBankNameChanging(value);
                    this.SendPropertyChanging("BankName");
                    this._BankName = value;
                    this.SendPropertyChanged("BankName");
                    this.OnBankNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountNumber in the schema.
        /// </summary>
        [Column(Storage = "_AccountNumber", DbType = "VARCHAR(18)", UpdateCheck = UpdateCheck.Never)]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if (this._AccountNumber != value)
                {
                    this.OnAccountNumberChanging(value);
                    this.SendPropertyChanging("AccountNumber");
                    this._AccountNumber = value;
                    this.SendPropertyChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IFSCCode in the schema.
        /// </summary>
        [Column(Storage = "_IFSCCode", DbType = "VARCHAR(11)", UpdateCheck = UpdateCheck.Never)]
        public string IFSCCode
        {
            get
            {
                return this._IFSCCode;
            }
            set
            {
                if (this._IFSCCode != value)
                {
                    this.OnIFSCCodeChanging(value);
                    this.SendPropertyChanging("IFSCCode");
                    this._IFSCCode = value;
                    this.SendPropertyChanged("IFSCCode");
                    this.OnIFSCCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UPI in the schema.
        /// </summary>
        [Column(Storage = "_UPI", DbType = "VARCHAR(6)", UpdateCheck = UpdateCheck.Never)]
        public string UPI
        {
            get
            {
                return this._UPI;
            }
            set
            {
                if (this._UPI != value)
                {
                    this.OnUPIChanging(value);
                    this.SendPropertyChanging("UPI");
                    this._UPI = value;
                    this.SendPropertyChanged("UPI");
                    this.OnUPIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationsStaffsBankDetail_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs", ThisKey="BankDetailId", OtherKey="BankDetailId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this._DevOrganisationsStaffs;
            }
            set
            {
                this._DevOrganisationsStaffs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisationsStaffsBankDetail = this;
        }
    
        private void detach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.DevOrganisationsStaffsBankDetail = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpApplyJobDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_ApplyJob_Details")]
    public partial class EmpApplyJobDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ApplyId;

        private int _UId;

        private int _JobId;

        private int _OId;

        private int _BranchId;

        private System.DateTime _ApplyDate;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        private EntityRef<EmprJob> _EmprJob;

        private EntityRef<DevOrganisationBranch> _DevOrganisationBranch;

        private EntityRef<DevOrganisation> _DevOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnApplyIdChanging(int value);
        partial void OnApplyIdChanged();
        partial void OnUIdChanging(int value);
        partial void OnUIdChanged();
        partial void OnJobIdChanging(int value);
        partial void OnJobIdChanged();
        partial void OnOIdChanging(int value);
        partial void OnOIdChanged();
        partial void OnBranchIdChanging(int value);
        partial void OnBranchIdChanged();
        partial void OnApplyDateChanging(System.DateTime value);
        partial void OnApplyDateChanged();
        #endregion

        public EmpApplyJobDetail()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            this._EmprJob  = default(EntityRef<EmprJob>);
            this._DevOrganisationBranch  = default(EntityRef<DevOrganisationBranch>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ApplyId in the schema.
        /// </summary>
        [Column(Storage = "_ApplyId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ApplyId
        {
            get
            {
                return this._ApplyId;
            }
            set
            {
                if (this._ApplyId != value)
                {
                    this.OnApplyIdChanging(value);
                    this.SendPropertyChanging("ApplyId");
                    this._ApplyId = value;
                    this.SendPropertyChanged("ApplyId");
                    this.OnApplyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobId in the schema.
        /// </summary>
        [Column(Storage = "_JobId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int JobId
        {
            get
            {
                return this._JobId;
            }
            set
            {
                if (this._JobId != value)
                {
                    if (this._EmprJob.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnJobIdChanging(value);
                    this.SendPropertyChanging("JobId");
                    this._JobId = value;
                    this.SendPropertyChanged("JobId");
                    this.OnJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Storage = "_BranchId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._DevOrganisationBranch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ApplyDate in the schema.
        /// </summary>
        [Column(Storage = "_ApplyDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ApplyDate
        {
            get
            {
                return this._ApplyDate;
            }
            set
            {
                if (this._ApplyDate != value)
                {
                    this.OnApplyDateChanging(value);
                    this.SendPropertyChanging("ApplyDate");
                    this._ApplyDate = value;
                    this.SendPropertyChanged("ApplyDate");
                    this.OnApplyDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpApplyJobDetail", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpApplyJobDetails.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpApplyJobDetails.Add(this);
                    }
                    else
                    {
                        this._UId = default(int);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJob in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmpApplyJobDetail", Storage="_EmprJob", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
        public EmprJob EmprJob
        {
            get
            {
                return this._EmprJob.Entity;
            }
            set
            {
                EmprJob previousValue = this._EmprJob.Entity;
                if ((previousValue != value) || (this._EmprJob.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("EmprJob");
                    if (previousValue != null)
                    {
                        this._EmprJob.Entity = null;
                        previousValue.EmpApplyJobDetails.Remove(this);
                    }
                    this._EmprJob.Entity = value;
                    if (value != null)
                    {
                        this._JobId = value.JobId;
                        value.EmpApplyJobDetails.Add(this);
                    }
                    else
                    {
                        this._JobId = default(int);
                    }
                    this.SendPropertyChanged("EmprJob");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_EmpApplyJobDetail", Storage="_DevOrganisationBranch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
        public DevOrganisationBranch DevOrganisationBranch
        {
            get
            {
                return this._DevOrganisationBranch.Entity;
            }
            set
            {
                DevOrganisationBranch previousValue = this._DevOrganisationBranch.Entity;
                if ((previousValue != value) || (this._DevOrganisationBranch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationBranch");
                    if (previousValue != null)
                    {
                        this._DevOrganisationBranch.Entity = null;
                        previousValue.EmpApplyJobDetails.Remove(this);
                    }
                    this._DevOrganisationBranch.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.BranchId;
                        value.EmpApplyJobDetails.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisationBranch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_EmpApplyJobDetail", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.EmpApplyJobDetails.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.EmpApplyJobDetails.Add(this);
                    }
                    else
                    {
                        this._OId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpBookmarkJobsDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_BookmarkJobs_Details")]
    public partial class EmpBookmarkJobsDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BookMarkId;

        private int _UId;

        private int _JobId;

        private System.DateTime? _SaveDate;

        private int? _OId;

        private int? _BranchId;
        #pragma warning restore 0649

        private EntityRef<EmprJob> _EmprJob;

        private EntityRef<SubUser> _SubUser;

        private EntityRef<DevOrganisationBranch> _DevOrganisationBranch;

        private EntityRef<DevOrganisation> _DevOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBookMarkIdChanging(int value);
        partial void OnBookMarkIdChanged();
        partial void OnUIdChanging(int value);
        partial void OnUIdChanged();
        partial void OnJobIdChanging(int value);
        partial void OnJobIdChanged();
        partial void OnSaveDateChanging(System.DateTime? value);
        partial void OnSaveDateChanged();
        partial void OnOIdChanging(int? value);
        partial void OnOIdChanged();
        partial void OnBranchIdChanging(int? value);
        partial void OnBranchIdChanged();
        #endregion

        public EmpBookmarkJobsDetail()
        {
            this._EmprJob  = default(EntityRef<EmprJob>);
            this._SubUser  = default(EntityRef<SubUser>);
            this._DevOrganisationBranch  = default(EntityRef<DevOrganisationBranch>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BookMarkId in the schema.
        /// </summary>
        [Column(Storage = "_BookMarkId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int BookMarkId
        {
            get
            {
                return this._BookMarkId;
            }
            set
            {
                if (this._BookMarkId != value)
                {
                    this.OnBookMarkIdChanging(value);
                    this.SendPropertyChanging("BookMarkId");
                    this._BookMarkId = value;
                    this.SendPropertyChanged("BookMarkId");
                    this.OnBookMarkIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobId in the schema.
        /// </summary>
        [Column(Storage = "_JobId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int JobId
        {
            get
            {
                return this._JobId;
            }
            set
            {
                if (this._JobId != value)
                {
                    if (this._EmprJob.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnJobIdChanging(value);
                    this.SendPropertyChanging("JobId");
                    this._JobId = value;
                    this.SendPropertyChanged("JobId");
                    this.OnJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SaveDate in the schema.
        /// </summary>
        [Column(Storage = "_SaveDate", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? SaveDate
        {
            get
            {
                return this._SaveDate;
            }
            set
            {
                if (this._SaveDate != value)
                {
                    this.OnSaveDateChanging(value);
                    this.SendPropertyChanging("SaveDate");
                    this._SaveDate = value;
                    this.SendPropertyChanged("SaveDate");
                    this.OnSaveDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchId in the schema.
        /// </summary>
        [Column(Storage = "_BranchId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? BranchId
        {
            get
            {
                return this._BranchId;
            }
            set
            {
                if (this._BranchId != value)
                {
                    if (this._DevOrganisationBranch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIdChanging(value);
                    this.SendPropertyChanging("BranchId");
                    this._BranchId = value;
                    this.SendPropertyChanged("BranchId");
                    this.OnBranchIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJob in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmpBookmarkJobsDetail", Storage="_EmprJob", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
        public EmprJob EmprJob
        {
            get
            {
                return this._EmprJob.Entity;
            }
            set
            {
                EmprJob previousValue = this._EmprJob.Entity;
                if ((previousValue != value) || (this._EmprJob.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("EmprJob");
                    if (previousValue != null)
                    {
                        this._EmprJob.Entity = null;
                        previousValue.EmpBookmarkJobsDetails.Remove(this);
                    }
                    this._EmprJob.Entity = value;
                    if (value != null)
                    {
                        this._JobId = value.JobId;
                        value.EmpBookmarkJobsDetails.Add(this);
                    }
                    else
                    {
                        this._JobId = default(int);
                    }
                    this.SendPropertyChanged("EmprJob");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpBookmarkJobsDetail", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpBookmarkJobsDetails.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpBookmarkJobsDetails.Add(this);
                    }
                    else
                    {
                        this._UId = default(int);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_EmpBookmarkJobsDetail", Storage="_DevOrganisationBranch", ThisKey="BranchId", OtherKey="BranchId", IsForeignKey=true)]
        public DevOrganisationBranch DevOrganisationBranch
        {
            get
            {
                return this._DevOrganisationBranch.Entity;
            }
            set
            {
                DevOrganisationBranch previousValue = this._DevOrganisationBranch.Entity;
                if ((previousValue != value) || (this._DevOrganisationBranch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationBranch");
                    if (previousValue != null)
                    {
                        this._DevOrganisationBranch.Entity = null;
                        previousValue.EmpBookmarkJobsDetails.Remove(this);
                    }
                    this._DevOrganisationBranch.Entity = value;
                    if (value != null)
                    {
                        this._BranchId = value.BranchId;
                        value.EmpBookmarkJobsDetails.Add(this);
                    }
                    else
                    {
                        this._BranchId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisationBranch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_EmpBookmarkJobsDetail", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.EmpBookmarkJobsDetails.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.EmpBookmarkJobsDetails.Add(this);
                    }
                    else
                    {
                        this._OId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpResumeAbout in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_Resume_About")]
    public partial class EmpResumeAbout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmpResumeAboutId;

        private int? _UId;

        private string _About;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmpResumeAboutIdChanging(int value);
        partial void OnEmpResumeAboutIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnAboutChanging(string value);
        partial void OnAboutChanged();
        #endregion

        public EmpResumeAbout()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmpResumeAboutId in the schema.
        /// </summary>
        [Column(Storage = "_EmpResumeAboutId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmpResumeAboutId
        {
            get
            {
                return this._EmpResumeAboutId;
            }
            set
            {
                if (this._EmpResumeAboutId != value)
                {
                    this.OnEmpResumeAboutIdChanging(value);
                    this.SendPropertyChanging("EmpResumeAboutId");
                    this._EmpResumeAboutId = value;
                    this.SendPropertyChanged("EmpResumeAboutId");
                    this.OnEmpResumeAboutIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for About in the schema.
        /// </summary>
        [Column(Storage = "_About", DbType = "VARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string About
        {
            get
            {
                return this._About;
            }
            set
            {
                if (this._About != value)
                {
                    this.OnAboutChanging(value);
                    this.SendPropertyChanging("About");
                    this._About = value;
                    this.SendPropertyChanged("About");
                    this.OnAboutChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeAbout", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpResumeAbouts.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpResumeAbouts.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpResumeEducation in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_Resume_Educations")]
    public partial class EmpResumeEducation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmpResumeEducationId;

        private int? _UId;

        private int? _EducationNameId;

        private string _EducationSteamName;

        private string _InstituteName;

        private System.DateTime? _StartDate;

        private System.DateTime? _EndDate;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        private EntityRef<SubFixedLookup> _SubFixedLookup;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmpResumeEducationIdChanging(int value);
        partial void OnEmpResumeEducationIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnEducationNameIdChanging(int? value);
        partial void OnEducationNameIdChanged();
        partial void OnEducationSteamNameChanging(string value);
        partial void OnEducationSteamNameChanged();
        partial void OnInstituteNameChanging(string value);
        partial void OnInstituteNameChanged();
        partial void OnStartDateChanging(System.DateTime? value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime? value);
        partial void OnEndDateChanged();
        #endregion

        public EmpResumeEducation()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            this._SubFixedLookup  = default(EntityRef<SubFixedLookup>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmpResumeEducationId in the schema.
        /// </summary>
        [Column(Storage = "_EmpResumeEducationId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmpResumeEducationId
        {
            get
            {
                return this._EmpResumeEducationId;
            }
            set
            {
                if (this._EmpResumeEducationId != value)
                {
                    this.OnEmpResumeEducationIdChanging(value);
                    this.SendPropertyChanging("EmpResumeEducationId");
                    this._EmpResumeEducationId = value;
                    this.SendPropertyChanged("EmpResumeEducationId");
                    this.OnEmpResumeEducationIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EducationNameId in the schema.
        /// </summary>
        [Column(Storage = "_EducationNameId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? EducationNameId
        {
            get
            {
                return this._EducationNameId;
            }
            set
            {
                if (this._EducationNameId != value)
                {
                    if (this._SubFixedLookup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEducationNameIdChanging(value);
                    this.SendPropertyChanging("EducationNameId");
                    this._EducationNameId = value;
                    this.SendPropertyChanged("EducationNameId");
                    this.OnEducationNameIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EducationSteamName in the schema.
        /// </summary>
        [Column(Storage = "_EducationSteamName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string EducationSteamName
        {
            get
            {
                return this._EducationSteamName;
            }
            set
            {
                if (this._EducationSteamName != value)
                {
                    this.OnEducationSteamNameChanging(value);
                    this.SendPropertyChanging("EducationSteamName");
                    this._EducationSteamName = value;
                    this.SendPropertyChanged("EducationSteamName");
                    this.OnEducationSteamNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InstituteName in the schema.
        /// </summary>
        [Column(Storage = "_InstituteName", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string InstituteName
        {
            get
            {
                return this._InstituteName;
            }
            set
            {
                if (this._InstituteName != value)
                {
                    this.OnInstituteNameChanging(value);
                    this.SendPropertyChanging("InstituteName");
                    this._InstituteName = value;
                    this.SendPropertyChanged("InstituteName");
                    this.OnInstituteNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Storage = "_StartDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging("StartDate");
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Storage = "_EndDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging("EndDate");
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeEducation", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpResumeEducations.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpResumeEducations.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubFixedLookup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_EmpResumeEducation", Storage="_SubFixedLookup", ThisKey="EducationNameId", OtherKey="FixedLookupId", IsForeignKey=true)]
        public SubFixedLookup SubFixedLookup
        {
            get
            {
                return this._SubFixedLookup.Entity;
            }
            set
            {
                SubFixedLookup previousValue = this._SubFixedLookup.Entity;
                if ((previousValue != value) || (this._SubFixedLookup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubFixedLookup");
                    if (previousValue != null)
                    {
                        this._SubFixedLookup.Entity = null;
                        previousValue.EmpResumeEducations.Remove(this);
                    }
                    this._SubFixedLookup.Entity = value;
                    if (value != null)
                    {
                        this._EducationNameId = value.FixedLookupId;
                        value.EmpResumeEducations.Add(this);
                    }
                    else
                    {
                        this._EducationNameId = default(int?);
                    }
                    this.SendPropertyChanged("SubFixedLookup");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpResumeOtherCertificate in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_Resume_OtherCertificates")]
    public partial class EmpResumeOtherCertificate : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmpResumeOtherCertificateId;

        private int? _UId;

        private string _CertificateName;

        private System.DateTime? _StartDate;

        private System.DateTime? _EndDate;

        private int? _CertificateFileId;
        #pragma warning restore 0649

        private EntityRef<CommonFile> _CommonFile;

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmpResumeOtherCertificateIdChanging(int value);
        partial void OnEmpResumeOtherCertificateIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnCertificateNameChanging(string value);
        partial void OnCertificateNameChanged();
        partial void OnStartDateChanging(System.DateTime? value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime? value);
        partial void OnEndDateChanged();
        partial void OnCertificateFileIdChanging(int? value);
        partial void OnCertificateFileIdChanged();
        #endregion

        public EmpResumeOtherCertificate()
        {
            this._CommonFile  = default(EntityRef<CommonFile>);
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmpResumeOtherCertificateId in the schema.
        /// </summary>
        [Column(Storage = "_EmpResumeOtherCertificateId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmpResumeOtherCertificateId
        {
            get
            {
                return this._EmpResumeOtherCertificateId;
            }
            set
            {
                if (this._EmpResumeOtherCertificateId != value)
                {
                    this.OnEmpResumeOtherCertificateIdChanging(value);
                    this.SendPropertyChanging("EmpResumeOtherCertificateId");
                    this._EmpResumeOtherCertificateId = value;
                    this.SendPropertyChanged("EmpResumeOtherCertificateId");
                    this.OnEmpResumeOtherCertificateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificateName in the schema.
        /// </summary>
        [Column(Storage = "_CertificateName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string CertificateName
        {
            get
            {
                return this._CertificateName;
            }
            set
            {
                if (this._CertificateName != value)
                {
                    this.OnCertificateNameChanging(value);
                    this.SendPropertyChanging("CertificateName");
                    this._CertificateName = value;
                    this.SendPropertyChanged("CertificateName");
                    this.OnCertificateNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Storage = "_StartDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging("StartDate");
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Storage = "_EndDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging("EndDate");
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CertificateFileId in the schema.
        /// </summary>
        [Column(Storage = "_CertificateFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? CertificateFileId
        {
            get
            {
                return this._CertificateFileId;
            }
            set
            {
                if (this._CertificateFileId != value)
                {
                    if (this._CommonFile.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCertificateFileIdChanging(value);
                    this.SendPropertyChanging("CertificateFileId");
                    this._CertificateFileId = value;
                    this.SendPropertyChanged("CertificateFileId");
                    this.OnCertificateFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_EmpResumeOtherCertificate", Storage="_CommonFile", ThisKey="CertificateFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile
        {
            get
            {
                return this._CommonFile.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile.Entity;
                if ((previousValue != value) || (this._CommonFile.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile");
                    if (previousValue != null)
                    {
                        this._CommonFile.Entity = null;
                        previousValue.EmpResumeOtherCertificates.Remove(this);
                    }
                    this._CommonFile.Entity = value;
                    if (value != null)
                    {
                        this._CertificateFileId = value.FileId;
                        value.EmpResumeOtherCertificates.Add(this);
                    }
                    else
                    {
                        this._CertificateFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeOtherCertificate", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpResumeOtherCertificates.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpResumeOtherCertificates.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpResumeSkill in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_Resume_Skills")]
    public partial class EmpResumeSkill : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmpResumeSkillId;

        private int? _UId;

        private string _SkillName;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmpResumeSkillIdChanging(int value);
        partial void OnEmpResumeSkillIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnSkillNameChanging(string value);
        partial void OnSkillNameChanged();
        #endregion

        public EmpResumeSkill()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmpResumeSkillId in the schema.
        /// </summary>
        [Column(Storage = "_EmpResumeSkillId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmpResumeSkillId
        {
            get
            {
                return this._EmpResumeSkillId;
            }
            set
            {
                if (this._EmpResumeSkillId != value)
                {
                    this.OnEmpResumeSkillIdChanging(value);
                    this.SendPropertyChanging("EmpResumeSkillId");
                    this._EmpResumeSkillId = value;
                    this.SendPropertyChanged("EmpResumeSkillId");
                    this.OnEmpResumeSkillIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SkillName in the schema.
        /// </summary>
        [Column(Storage = "_SkillName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string SkillName
        {
            get
            {
                return this._SkillName;
            }
            set
            {
                if (this._SkillName != value)
                {
                    this.OnSkillNameChanging(value);
                    this.SendPropertyChanging("SkillName");
                    this._SkillName = value;
                    this.SendPropertyChanged("SkillName");
                    this.OnSkillNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeSkill", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpResumeSkills.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpResumeSkills.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmpResumeWorkExperience in the schema.
    /// </summary>
    [Table(Name = @"dbo.emp_Resume_WorkExperience")]
    public partial class EmpResumeWorkExperience : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmpResumeWorkExperienceId;

        private int? _UId;

        private string _JobTitle;

        private string _OrganizationName;

        private string _WorkFrom;

        private System.DateTime? _StartDate;

        private System.DateTime? _EndDate;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmpResumeWorkExperienceIdChanging(int value);
        partial void OnEmpResumeWorkExperienceIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnJobTitleChanging(string value);
        partial void OnJobTitleChanged();
        partial void OnOrganizationNameChanging(string value);
        partial void OnOrganizationNameChanged();
        partial void OnWorkFromChanging(string value);
        partial void OnWorkFromChanged();
        partial void OnStartDateChanging(System.DateTime? value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime? value);
        partial void OnEndDateChanged();
        #endregion

        public EmpResumeWorkExperience()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmpResumeWorkExperienceId in the schema.
        /// </summary>
        [Column(Storage = "_EmpResumeWorkExperienceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmpResumeWorkExperienceId
        {
            get
            {
                return this._EmpResumeWorkExperienceId;
            }
            set
            {
                if (this._EmpResumeWorkExperienceId != value)
                {
                    this.OnEmpResumeWorkExperienceIdChanging(value);
                    this.SendPropertyChanging("EmpResumeWorkExperienceId");
                    this._EmpResumeWorkExperienceId = value;
                    this.SendPropertyChanged("EmpResumeWorkExperienceId");
                    this.OnEmpResumeWorkExperienceIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobTitle in the schema.
        /// </summary>
        [Column(Storage = "_JobTitle", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string JobTitle
        {
            get
            {
                return this._JobTitle;
            }
            set
            {
                if (this._JobTitle != value)
                {
                    this.OnJobTitleChanging(value);
                    this.SendPropertyChanging("JobTitle");
                    this._JobTitle = value;
                    this.SendPropertyChanged("JobTitle");
                    this.OnJobTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrganizationName in the schema.
        /// </summary>
        [Column(Storage = "_OrganizationName", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string OrganizationName
        {
            get
            {
                return this._OrganizationName;
            }
            set
            {
                if (this._OrganizationName != value)
                {
                    this.OnOrganizationNameChanging(value);
                    this.SendPropertyChanging("OrganizationName");
                    this._OrganizationName = value;
                    this.SendPropertyChanged("OrganizationName");
                    this.OnOrganizationNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for WorkFrom in the schema.
        /// </summary>
        [Column(Storage = "_WorkFrom", DbType = "VARCHAR(20)", UpdateCheck = UpdateCheck.Never)]
        public string WorkFrom
        {
            get
            {
                return this._WorkFrom;
            }
            set
            {
                if (this._WorkFrom != value)
                {
                    this.OnWorkFromChanging(value);
                    this.SendPropertyChanging("WorkFrom");
                    this._WorkFrom = value;
                    this.SendPropertyChanged("WorkFrom");
                    this.OnWorkFromChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Storage = "_StartDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging("StartDate");
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Storage = "_EndDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging("EndDate");
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeWorkExperience", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmpResumeWorkExperiences.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmpResumeWorkExperiences.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmprJob in the schema.
    /// </summary>
    [Table(Name = @"dbo.empr_Jobs")]
    public partial class EmprJob : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _JobId;

        private string _Title;

        private int _FileId;

        private string _Location;

        private string _MinSalary;

        private string _MaxSalary;

        private string _Roles;

        private string _Description;

        private System.DateTime _PostDate;

        private System.DateTime _EndDate;

        private int? _OId;

        private int? _UId;

        private int? _BranchID;

        private string _Status;

        private int? _RId;
        #pragma warning restore 0649

        private EntitySet<EmpApplyJobDetail> _EmpApplyJobDetails;

        private EntitySet<EmpBookmarkJobsDetail> _EmpBookmarkJobsDetails;

        private EntityRef<CommonFile> _CommonFile;

        private EntityRef<DevOrganisationBranch> _DevOrganisationBranch;

        private EntityRef<SubUser> _SubUser;

        private EntityRef<DevOrganisation> _DevOrganisation;

        private EntitySet<EmprJobSkill> _EmprJobSkills;

        private EntitySet<EmprJobType> _EmprJobTypes;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnJobIdChanging(int value);
        partial void OnJobIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnFileIdChanging(int value);
        partial void OnFileIdChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnMinSalaryChanging(string value);
        partial void OnMinSalaryChanged();
        partial void OnMaxSalaryChanging(string value);
        partial void OnMaxSalaryChanged();
        partial void OnRolesChanging(string value);
        partial void OnRolesChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPostDateChanging(System.DateTime value);
        partial void OnPostDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        partial void OnEndDateChanged();
        partial void OnOIdChanging(int? value);
        partial void OnOIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnBranchIDChanging(int? value);
        partial void OnBranchIDChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnRIdChanging(int? value);
        partial void OnRIdChanged();
        #endregion

        public EmprJob()
        {
            this._EmpApplyJobDetails = new EntitySet<EmpApplyJobDetail>(new Action<EmpApplyJobDetail>(this.attach_EmpApplyJobDetails), new Action<EmpApplyJobDetail>(this.detach_EmpApplyJobDetails));
            this._EmpBookmarkJobsDetails = new EntitySet<EmpBookmarkJobsDetail>(new Action<EmpBookmarkJobsDetail>(this.attach_EmpBookmarkJobsDetails), new Action<EmpBookmarkJobsDetail>(this.detach_EmpBookmarkJobsDetails));
            this._CommonFile  = default(EntityRef<CommonFile>);
            this._DevOrganisationBranch  = default(EntityRef<DevOrganisationBranch>);
            this._SubUser  = default(EntityRef<SubUser>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            this._EmprJobSkills = new EntitySet<EmprJobSkill>(new Action<EmprJobSkill>(this.attach_EmprJobSkills), new Action<EmprJobSkill>(this.detach_EmprJobSkills));
            this._EmprJobTypes = new EntitySet<EmprJobType>(new Action<EmprJobType>(this.attach_EmprJobTypes), new Action<EmprJobType>(this.detach_EmprJobTypes));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for JobId in the schema.
        /// </summary>
        [Column(Storage = "_JobId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int JobId
        {
            get
            {
                return this._JobId;
            }
            set
            {
                if (this._JobId != value)
                {
                    this.OnJobIdChanging(value);
                    this.SendPropertyChanging("JobId");
                    this._JobId = value;
                    this.SendPropertyChanged("JobId");
                    this.OnJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileId in the schema.
        /// </summary>
        [Column(Storage = "_FileId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int FileId
        {
            get
            {
                return this._FileId;
            }
            set
            {
                if (this._FileId != value)
                {
                    if (this._CommonFile.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging("FileId");
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        [Column(Storage = "_Location", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging("Location");
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MinSalary in the schema.
        /// </summary>
        [Column(Storage = "_MinSalary", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MinSalary
        {
            get
            {
                return this._MinSalary;
            }
            set
            {
                if (this._MinSalary != value)
                {
                    this.OnMinSalaryChanging(value);
                    this.SendPropertyChanging("MinSalary");
                    this._MinSalary = value;
                    this.SendPropertyChanged("MinSalary");
                    this.OnMinSalaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MaxSalary in the schema.
        /// </summary>
        [Column(Storage = "_MaxSalary", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MaxSalary
        {
            get
            {
                return this._MaxSalary;
            }
            set
            {
                if (this._MaxSalary != value)
                {
                    this.OnMaxSalaryChanging(value);
                    this.SendPropertyChanging("MaxSalary");
                    this._MaxSalary = value;
                    this.SendPropertyChanged("MaxSalary");
                    this.OnMaxSalaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Roles in the schema.
        /// </summary>
        [Column(Storage = "_Roles", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Roles
        {
            get
            {
                return this._Roles;
            }
            set
            {
                if (this._Roles != value)
                {
                    this.OnRolesChanging(value);
                    this.SendPropertyChanging("Roles");
                    this._Roles = value;
                    this.SendPropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostDate in the schema.
        /// </summary>
        [Column(Storage = "_PostDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime PostDate
        {
            get
            {
                return this._PostDate;
            }
            set
            {
                if (this._PostDate != value)
                {
                    this.OnPostDateChanging(value);
                    this.SendPropertyChanging("PostDate");
                    this._PostDate = value;
                    this.SendPropertyChanged("PostDate");
                    this.OnPostDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Storage = "_EndDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging("EndDate");
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BranchID in the schema.
        /// </summary>
        [Column(Storage = "_BranchID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? BranchID
        {
            get
            {
                return this._BranchID;
            }
            set
            {
                if (this._BranchID != value)
                {
                    if (this._DevOrganisationBranch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnBranchIDChanging(value);
                    this.SendPropertyChanging("BranchID");
                    this._BranchID = value;
                    this.SendPropertyChanged("BranchID");
                    this.OnBranchIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RId in the schema.
        /// </summary>
        [Column(Storage = "_RId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RId
        {
            get
            {
                return this._RId;
            }
            set
            {
                if (this._RId != value)
                {
                    this.OnRIdChanging(value);
                    this.SendPropertyChanging("RId");
                    this._RId = value;
                    this.SendPropertyChanged("RId");
                    this.OnRIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmpApplyJobDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmpApplyJobDetail", Storage="_EmpApplyJobDetails", ThisKey="JobId", OtherKey="JobId", DeleteRule="NO ACTION")]
        public EntitySet<EmpApplyJobDetail> EmpApplyJobDetails
        {
            get
            {
                return this._EmpApplyJobDetails;
            }
            set
            {
                this._EmpApplyJobDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpBookmarkJobsDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmpBookmarkJobsDetail", Storage="_EmpBookmarkJobsDetails", ThisKey="JobId", OtherKey="JobId", DeleteRule="NO ACTION")]
        public EntitySet<EmpBookmarkJobsDetail> EmpBookmarkJobsDetails
        {
            get
            {
                return this._EmpBookmarkJobsDetails;
            }
            set
            {
                this._EmpBookmarkJobsDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_EmprJob", Storage="_CommonFile", ThisKey="FileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile
        {
            get
            {
                return this._CommonFile.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile.Entity;
                if ((previousValue != value) || (this._CommonFile.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile");
                    if (previousValue != null)
                    {
                        this._CommonFile.Entity = null;
                        previousValue.EmprJobs.Remove(this);
                    }
                    this._CommonFile.Entity = value;
                    if (value != null)
                    {
                        this._FileId = value.FileId;
                        value.EmprJobs.Add(this);
                    }
                    else
                    {
                        this._FileId = default(int);
                    }
                    this.SendPropertyChanged("CommonFile");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisationBranch_EmprJob", Storage="_DevOrganisationBranch", ThisKey="BranchID", OtherKey="BranchId", IsForeignKey=true)]
        public DevOrganisationBranch DevOrganisationBranch
        {
            get
            {
                return this._DevOrganisationBranch.Entity;
            }
            set
            {
                DevOrganisationBranch previousValue = this._DevOrganisationBranch.Entity;
                if ((previousValue != value) || (this._DevOrganisationBranch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisationBranch");
                    if (previousValue != null)
                    {
                        this._DevOrganisationBranch.Entity = null;
                        previousValue.EmprJobs.Remove(this);
                    }
                    this._DevOrganisationBranch.Entity = value;
                    if (value != null)
                    {
                        this._BranchID = value.BranchId;
                        value.EmprJobs.Add(this);
                    }
                    else
                    {
                        this._BranchID = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisationBranch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmprJob", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.EmprJobs.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.EmprJobs.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_EmprJob", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.EmprJobs.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.EmprJobs.Add(this);
                    }
                    else
                    {
                        this._OId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJobSkills in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmprJobSkill", Storage="_EmprJobSkills", ThisKey="JobId", OtherKey="JobId", DeleteRule="NO ACTION")]
        public EntitySet<EmprJobSkill> EmprJobSkills
        {
            get
            {
                return this._EmprJobSkills;
            }
            set
            {
                this._EmprJobSkills.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJobTypes in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmprJobType", Storage="_EmprJobTypes", ThisKey="JobId", OtherKey="JobId", DeleteRule="NO ACTION")]
        public EntitySet<EmprJobType> EmprJobTypes
        {
            get
            {
                return this._EmprJobTypes;
            }
            set
            {
                this._EmprJobTypes.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.EmprJob = this;
        }
    
        private void detach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.EmprJob = null;
        }

        private void attach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.EmprJob = this;
        }
    
        private void detach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.EmprJob = null;
        }

        private void attach_EmprJobSkills(EmprJobSkill entity)
        {
            this.SendPropertyChanging("EmprJobSkills");
            entity.EmprJob = this;
        }
    
        private void detach_EmprJobSkills(EmprJobSkill entity)
        {
            this.SendPropertyChanging("EmprJobSkills");
            entity.EmprJob = null;
        }

        private void attach_EmprJobTypes(EmprJobType entity)
        {
            this.SendPropertyChanging("EmprJobTypes");
            entity.EmprJob = this;
        }
    
        private void detach_EmprJobTypes(EmprJobType entity)
        {
            this.SendPropertyChanging("EmprJobTypes");
            entity.EmprJob = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmprJobSkill in the schema.
    /// </summary>
    [Table(Name = @"dbo.empr_JobSkills")]
    public partial class EmprJobSkill : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SkillId;

        private string _Skill;

        private int _JobId;
        #pragma warning restore 0649

        private EntityRef<EmprJob> _EmprJob;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSkillIdChanging(int value);
        partial void OnSkillIdChanged();
        partial void OnSkillChanging(string value);
        partial void OnSkillChanged();
        partial void OnJobIdChanging(int value);
        partial void OnJobIdChanged();
        #endregion

        public EmprJobSkill()
        {
            this._EmprJob  = default(EntityRef<EmprJob>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SkillId in the schema.
        /// </summary>
        [Column(Storage = "_SkillId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int SkillId
        {
            get
            {
                return this._SkillId;
            }
            set
            {
                if (this._SkillId != value)
                {
                    this.OnSkillIdChanging(value);
                    this.SendPropertyChanging("SkillId");
                    this._SkillId = value;
                    this.SendPropertyChanged("SkillId");
                    this.OnSkillIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Skill in the schema.
        /// </summary>
        [Column(Storage = "_Skill", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Skill
        {
            get
            {
                return this._Skill;
            }
            set
            {
                if (this._Skill != value)
                {
                    this.OnSkillChanging(value);
                    this.SendPropertyChanging("Skill");
                    this._Skill = value;
                    this.SendPropertyChanged("Skill");
                    this.OnSkillChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobId in the schema.
        /// </summary>
        [Column(Storage = "_JobId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int JobId
        {
            get
            {
                return this._JobId;
            }
            set
            {
                if (this._JobId != value)
                {
                    if (this._EmprJob.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnJobIdChanging(value);
                    this.SendPropertyChanging("JobId");
                    this._JobId = value;
                    this.SendPropertyChanged("JobId");
                    this.OnJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJob in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmprJobSkill", Storage="_EmprJob", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
        public EmprJob EmprJob
        {
            get
            {
                return this._EmprJob.Entity;
            }
            set
            {
                EmprJob previousValue = this._EmprJob.Entity;
                if ((previousValue != value) || (this._EmprJob.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("EmprJob");
                    if (previousValue != null)
                    {
                        this._EmprJob.Entity = null;
                        previousValue.EmprJobSkills.Remove(this);
                    }
                    this._EmprJob.Entity = value;
                    if (value != null)
                    {
                        this._JobId = value.JobId;
                        value.EmprJobSkills.Add(this);
                    }
                    else
                    {
                        this._JobId = default(int);
                    }
                    this.SendPropertyChanged("EmprJob");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.EmprJobType in the schema.
    /// </summary>
    [Table(Name = @"dbo.empr_JobTypes")]
    public partial class EmprJobType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _JobTypeId;

        private string _Type;

        private int _JobId;
        #pragma warning restore 0649

        private EntityRef<EmprJob> _EmprJob;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnJobTypeIdChanging(int value);
        partial void OnJobTypeIdChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnJobIdChanging(int value);
        partial void OnJobIdChanged();
        #endregion

        public EmprJobType()
        {
            this._EmprJob  = default(EntityRef<EmprJob>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for JobTypeId in the schema.
        /// </summary>
        [Column(Storage = "_JobTypeId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int JobTypeId
        {
            get
            {
                return this._JobTypeId;
            }
            set
            {
                if (this._JobTypeId != value)
                {
                    this.OnJobTypeIdChanging(value);
                    this.SendPropertyChanging("JobTypeId");
                    this._JobTypeId = value;
                    this.SendPropertyChanged("JobTypeId");
                    this.OnJobTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Storage = "_Type", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobId in the schema.
        /// </summary>
        [Column(Storage = "_JobId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int JobId
        {
            get
            {
                return this._JobId;
            }
            set
            {
                if (this._JobId != value)
                {
                    if (this._EmprJob.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnJobIdChanging(value);
                    this.SendPropertyChanging("JobId");
                    this._JobId = value;
                    this.SendPropertyChanged("JobId");
                    this.OnJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJob in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EmprJob_EmprJobType", Storage="_EmprJob", ThisKey="JobId", OtherKey="JobId", IsForeignKey=true)]
        public EmprJob EmprJob
        {
            get
            {
                return this._EmprJob.Entity;
            }
            set
            {
                EmprJob previousValue = this._EmprJob.Entity;
                if ((previousValue != value) || (this._EmprJob.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("EmprJob");
                    if (previousValue != null)
                    {
                        this._EmprJob.Entity = null;
                        previousValue.EmprJobTypes.Remove(this);
                    }
                    this._EmprJob.Entity = value;
                    if (value != null)
                    {
                        this._JobId = value.JobId;
                        value.EmprJobTypes.Add(this);
                    }
                    else
                    {
                        this._JobId = default(int);
                    }
                    this.SendPropertyChanged("EmprJob");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.OrgStaffsAttendancesDaily in the schema.
    /// </summary>
    [Table(Name = @"dbo.org_Staffs_Attendances_Daily")]
    public partial class OrgStaffsAttendancesDaily : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrgStaffAttendanceDailyId;

        private int? _UId;

        private int? _RId;

        private System.DateTime? _ChekIN;

        private System.DateTime? _CheckOUT;

        private System.DateTime? _LastUpdateDate;

        private bool? _IsAccessible = true;
        #pragma warning restore 0649

        private EntityRef<SubRole> _SubRole;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrgStaffAttendanceDailyIdChanging(int value);
        partial void OnOrgStaffAttendanceDailyIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnRIdChanging(int? value);
        partial void OnRIdChanged();
        partial void OnChekINChanging(System.DateTime? value);
        partial void OnChekINChanged();
        partial void OnCheckOUTChanging(System.DateTime? value);
        partial void OnCheckOUTChanged();
        partial void OnLastUpdateDateChanging(System.DateTime? value);
        partial void OnLastUpdateDateChanged();
        partial void OnIsAccessibleChanging(bool? value);
        partial void OnIsAccessibleChanged();
        #endregion

        public OrgStaffsAttendancesDaily()
        {
            this._SubRole  = default(EntityRef<SubRole>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrgStaffAttendanceDailyId in the schema.
        /// </summary>
        [Column(Storage = "_OrgStaffAttendanceDailyId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrgStaffAttendanceDailyId
        {
            get
            {
                return this._OrgStaffAttendanceDailyId;
            }
            set
            {
                if (this._OrgStaffAttendanceDailyId != value)
                {
                    this.OnOrgStaffAttendanceDailyIdChanging(value);
                    this.SendPropertyChanging("OrgStaffAttendanceDailyId");
                    this._OrgStaffAttendanceDailyId = value;
                    this.SendPropertyChanged("OrgStaffAttendanceDailyId");
                    this.OnOrgStaffAttendanceDailyIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RId in the schema.
        /// </summary>
        [Column(Storage = "_RId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? RId
        {
            get
            {
                return this._RId;
            }
            set
            {
                if (this._RId != value)
                {
                    if (this._SubRole.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRIdChanging(value);
                    this.SendPropertyChanging("RId");
                    this._RId = value;
                    this.SendPropertyChanged("RId");
                    this.OnRIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ChekIN in the schema.
        /// </summary>
        [Column(Storage = "_ChekIN", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? ChekIN
        {
            get
            {
                return this._ChekIN;
            }
            set
            {
                if (this._ChekIN != value)
                {
                    this.OnChekINChanging(value);
                    this.SendPropertyChanging("ChekIN");
                    this._ChekIN = value;
                    this.SendPropertyChanged("ChekIN");
                    this.OnChekINChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CheckOUT in the schema.
        /// </summary>
        [Column(Storage = "_CheckOUT", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CheckOUT
        {
            get
            {
                return this._CheckOUT;
            }
            set
            {
                if (this._CheckOUT != value)
                {
                    this.OnCheckOUTChanging(value);
                    this.SendPropertyChanging("CheckOUT");
                    this._CheckOUT = value;
                    this.SendPropertyChanged("CheckOUT");
                    this.OnCheckOUTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastUpdateDate in the schema.
        /// </summary>
        [Column(Storage = "_LastUpdateDate", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? LastUpdateDate
        {
            get
            {
                return this._LastUpdateDate;
            }
            set
            {
                if (this._LastUpdateDate != value)
                {
                    this.OnLastUpdateDateChanging(value);
                    this.SendPropertyChanging("LastUpdateDate");
                    this._LastUpdateDate = value;
                    this.SendPropertyChanged("LastUpdateDate");
                    this.OnLastUpdateDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsAccessible in the schema.
        /// </summary>
        [Column(Storage = "_IsAccessible", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? IsAccessible
        {
            get
            {
                return this._IsAccessible;
            }
            set
            {
                if (this._IsAccessible != value)
                {
                    this.OnIsAccessibleChanging(value);
                    this.SendPropertyChanging("IsAccessible");
                    this._IsAccessible = value;
                    this.SendPropertyChanged("IsAccessible");
                    this.OnIsAccessibleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubRole in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubRole_OrgStaffsAttendancesDaily", Storage="_SubRole", ThisKey="RId", OtherKey="RId", IsForeignKey=true)]
        public SubRole SubRole
        {
            get
            {
                return this._SubRole.Entity;
            }
            set
            {
                SubRole previousValue = this._SubRole.Entity;
                if ((previousValue != value) || (this._SubRole.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubRole");
                    if (previousValue != null)
                    {
                        this._SubRole.Entity = null;
                        previousValue.OrgStaffsAttendancesDailies.Remove(this);
                    }
                    this._SubRole.Entity = value;
                    if (value != null)
                    {
                        this._RId = value.RId;
                        value.OrgStaffsAttendancesDailies.Add(this);
                    }
                    else
                    {
                        this._RId = default(int?);
                    }
                    this.SendPropertyChanged("SubRole");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.OrgStaffsLeaveApplication in the schema.
    /// </summary>
    [Table(Name = @"dbo.org_Staffs_LeaveApplications")]
    public partial class OrgStaffsLeaveApplication : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OrgStaffLeaveId;

        private System.DateTime? _StartDate;

        private System.DateTime? _EndDate;

        private string _Reason;

        private bool? _IsPaidLeave = true;

        private bool? _IsLeaveApproved = false;

        private int? _URId;
        #pragma warning restore 0649

        private EntityRef<SubUserOrganisation> _SubUserOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrgStaffLeaveIdChanging(int value);
        partial void OnOrgStaffLeaveIdChanged();
        partial void OnStartDateChanging(System.DateTime? value);
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime? value);
        partial void OnEndDateChanged();
        partial void OnReasonChanging(string value);
        partial void OnReasonChanged();
        partial void OnIsPaidLeaveChanging(bool? value);
        partial void OnIsPaidLeaveChanged();
        partial void OnIsLeaveApprovedChanging(bool? value);
        partial void OnIsLeaveApprovedChanged();
        partial void OnURIdChanging(int? value);
        partial void OnURIdChanged();
        #endregion

        public OrgStaffsLeaveApplication()
        {
            this._SubUserOrganisation  = default(EntityRef<SubUserOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OrgStaffLeaveId in the schema.
        /// </summary>
        [Column(Storage = "_OrgStaffLeaveId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OrgStaffLeaveId
        {
            get
            {
                return this._OrgStaffLeaveId;
            }
            set
            {
                if (this._OrgStaffLeaveId != value)
                {
                    this.OnOrgStaffLeaveIdChanging(value);
                    this.SendPropertyChanging("OrgStaffLeaveId");
                    this._OrgStaffLeaveId = value;
                    this.SendPropertyChanged("OrgStaffLeaveId");
                    this.OnOrgStaffLeaveIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Storage = "_StartDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging("StartDate");
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EndDate in the schema.
        /// </summary>
        [Column(Storage = "_EndDate", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this.SendPropertyChanging("EndDate");
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Reason in the schema.
        /// </summary>
        [Column(Storage = "_Reason", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Reason
        {
            get
            {
                return this._Reason;
            }
            set
            {
                if (this._Reason != value)
                {
                    this.OnReasonChanging(value);
                    this.SendPropertyChanging("Reason");
                    this._Reason = value;
                    this.SendPropertyChanged("Reason");
                    this.OnReasonChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsPaidLeave in the schema.
        /// </summary>
        [Column(Storage = "_IsPaidLeave", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? IsPaidLeave
        {
            get
            {
                return this._IsPaidLeave;
            }
            set
            {
                if (this._IsPaidLeave != value)
                {
                    this.OnIsPaidLeaveChanging(value);
                    this.SendPropertyChanging("IsPaidLeave");
                    this._IsPaidLeave = value;
                    this.SendPropertyChanged("IsPaidLeave");
                    this.OnIsPaidLeaveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsLeaveApproved in the schema.
        /// </summary>
        [Column(Storage = "_IsLeaveApproved", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? IsLeaveApproved
        {
            get
            {
                return this._IsLeaveApproved;
            }
            set
            {
                if (this._IsLeaveApproved != value)
                {
                    this.OnIsLeaveApprovedChanging(value);
                    this.SendPropertyChanging("IsLeaveApproved");
                    this._IsLeaveApproved = value;
                    this.SendPropertyChanged("IsLeaveApproved");
                    this.OnIsLeaveApprovedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for URId in the schema.
        /// </summary>
        [Column(Storage = "_URId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? URId
        {
            get
            {
                return this._URId;
            }
            set
            {
                if (this._URId != value)
                {
                    if (this._SubUserOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnURIdChanging(value);
                    this.SendPropertyChanging("URId");
                    this._URId = value;
                    this.SendPropertyChanged("URId");
                    this.OnURIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUserOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUserOrganisation_OrgStaffsLeaveApplication", Storage="_SubUserOrganisation", ThisKey="URId", OtherKey="URId", IsForeignKey=true)]
        public SubUserOrganisation SubUserOrganisation
        {
            get
            {
                return this._SubUserOrganisation.Entity;
            }
            set
            {
                SubUserOrganisation previousValue = this._SubUserOrganisation.Entity;
                if ((previousValue != value) || (this._SubUserOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUserOrganisation");
                    if (previousValue != null)
                    {
                        this._SubUserOrganisation.Entity = null;
                        previousValue.OrgStaffsLeaveApplications.Remove(this);
                    }
                    this._SubUserOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._URId = value.URId;
                        value.OrgStaffsLeaveApplications.Add(this);
                    }
                    else
                    {
                        this._URId = default(int?);
                    }
                    this.SendPropertyChanged("SubUserOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubFixedLookup in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_FixedLookup")]
    public partial class SubFixedLookup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _FixedLookupId;

        private string _FixedLookupType;

        private string _FixedLookup;

        private string _FixedLookupFormatted;
        #pragma warning restore 0649

        private EntitySet<DevOrganisation> _DevOrganisations;

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs_WeekOffOneDay;

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs_WeekOffSecondDay;

        private EntitySet<EmpResumeEducation> _EmpResumeEducations;

        private EntitySet<SubLookup> _SubLookups;

        private EntitySet<SubUser> _SubUsers;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnFixedLookupIdChanging(int value);
        partial void OnFixedLookupIdChanged();
        partial void OnFixedLookupTypeChanging(string value);
        partial void OnFixedLookupTypeChanged();
        partial void OnFixedLookupChanging(string value);
        partial void OnFixedLookupChanged();
        partial void OnFixedLookupFormattedChanging(string value);
        partial void OnFixedLookupFormattedChanged();
        #endregion

        public SubFixedLookup()
        {
            this._DevOrganisations = new EntitySet<DevOrganisation>(new Action<DevOrganisation>(this.attach_DevOrganisations), new Action<DevOrganisation>(this.detach_DevOrganisations));
            this._DevOrganisationsStaffs_WeekOffOneDay = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs_WeekOffOneDay), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs_WeekOffOneDay));
            this._DevOrganisationsStaffs_WeekOffSecondDay = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs_WeekOffSecondDay), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs_WeekOffSecondDay));
            this._EmpResumeEducations = new EntitySet<EmpResumeEducation>(new Action<EmpResumeEducation>(this.attach_EmpResumeEducations), new Action<EmpResumeEducation>(this.detach_EmpResumeEducations));
            this._SubLookups = new EntitySet<SubLookup>(new Action<SubLookup>(this.attach_SubLookups), new Action<SubLookup>(this.detach_SubLookups));
            this._SubUsers = new EntitySet<SubUser>(new Action<SubUser>(this.attach_SubUsers), new Action<SubUser>(this.detach_SubUsers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for FixedLookupId in the schema.
        /// </summary>
        [Column(Storage = "_FixedLookupId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FixedLookupId
        {
            get
            {
                return this._FixedLookupId;
            }
            set
            {
                if (this._FixedLookupId != value)
                {
                    this.OnFixedLookupIdChanging(value);
                    this.SendPropertyChanging("FixedLookupId");
                    this._FixedLookupId = value;
                    this.SendPropertyChanged("FixedLookupId");
                    this.OnFixedLookupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixedLookupType in the schema.
        /// </summary>
        [Column(Storage = "_FixedLookupType", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FixedLookupType
        {
            get
            {
                return this._FixedLookupType;
            }
            set
            {
                if (this._FixedLookupType != value)
                {
                    this.OnFixedLookupTypeChanging(value);
                    this.SendPropertyChanging("FixedLookupType");
                    this._FixedLookupType = value;
                    this.SendPropertyChanged("FixedLookupType");
                    this.OnFixedLookupTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixedLookup in the schema.
        /// </summary>
        [Column(Storage = "_FixedLookup", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FixedLookup
        {
            get
            {
                return this._FixedLookup;
            }
            set
            {
                if (this._FixedLookup != value)
                {
                    this.OnFixedLookupChanging(value);
                    this.SendPropertyChanging("FixedLookup");
                    this._FixedLookup = value;
                    this.SendPropertyChanged("FixedLookup");
                    this.OnFixedLookupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FixedLookupFormatted in the schema.
        /// </summary>
        [Column(Storage = "_FixedLookupFormatted", AutoSync = AutoSync.Always, DbType = "VARCHAR(8000)", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never)]
        public string FixedLookupFormatted
        {
            get
            {
                return this._FixedLookupFormatted;
            }
            set
            {
                if (this._FixedLookupFormatted != value)
                {
                    this.OnFixedLookupFormattedChanging(value);
                    this.SendPropertyChanging("FixedLookupFormatted");
                    this._FixedLookupFormatted = value;
                    this.SendPropertyChanged("FixedLookupFormatted");
                    this.OnFixedLookupFormattedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_DevOrganisation", Storage="_DevOrganisations", ThisKey="FixedLookupId", OtherKey="InudstrySectorId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisation> DevOrganisations
        {
            get
            {
                return this._DevOrganisations;
            }
            set
            {
                this._DevOrganisations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs_WeekOffOneDay in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs_WeekOffOneDay", ThisKey="FixedLookupId", OtherKey="WeekOffOneDay", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs_WeekOffOneDay
        {
            get
            {
                return this._DevOrganisationsStaffs_WeekOffOneDay;
            }
            set
            {
                this._DevOrganisationsStaffs_WeekOffOneDay.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs_WeekOffSecondDay in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_DevOrganisationsStaff1", Storage="_DevOrganisationsStaffs_WeekOffSecondDay", ThisKey="FixedLookupId", OtherKey="WeekOffSecondDay", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs_WeekOffSecondDay
        {
            get
            {
                return this._DevOrganisationsStaffs_WeekOffSecondDay;
            }
            set
            {
                this._DevOrganisationsStaffs_WeekOffSecondDay.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeEducations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_EmpResumeEducation", Storage="_EmpResumeEducations", ThisKey="FixedLookupId", OtherKey="EducationNameId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeEducation> EmpResumeEducations
        {
            get
            {
                return this._EmpResumeEducations;
            }
            set
            {
                this._EmpResumeEducations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubLookups in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_SubLookup", Storage="_SubLookups", ThisKey="FixedLookupId", OtherKey="LookupTypeId", DeleteRule="NO ACTION")]
        public EntitySet<SubLookup> SubLookups
        {
            get
            {
                return this._SubLookups;
            }
            set
            {
                this._SubLookups.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_SubUser", Storage="_SubUsers", ThisKey="FixedLookupId", OtherKey="LoginTypeId", DeleteRule="NO ACTION")]
        public EntitySet<SubUser> SubUsers
        {
            get
            {
                return this._SubUsers;
            }
            set
            {
                this._SubUsers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisations(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations");
            entity.SubFixedLookup = this;
        }
    
        private void detach_DevOrganisations(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations");
            entity.SubFixedLookup = null;
        }

        private void attach_DevOrganisationsStaffs_WeekOffOneDay(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs_WeekOffOneDay");
            entity.SubFixedLookup_WeekOffOneDay = this;
        }
    
        private void detach_DevOrganisationsStaffs_WeekOffOneDay(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs_WeekOffOneDay");
            entity.SubFixedLookup_WeekOffOneDay = null;
        }

        private void attach_DevOrganisationsStaffs_WeekOffSecondDay(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs_WeekOffSecondDay");
            entity.SubFixedLookup_WeekOffSecondDay = this;
        }
    
        private void detach_DevOrganisationsStaffs_WeekOffSecondDay(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs_WeekOffSecondDay");
            entity.SubFixedLookup_WeekOffSecondDay = null;
        }

        private void attach_EmpResumeEducations(EmpResumeEducation entity)
        {
            this.SendPropertyChanging("EmpResumeEducations");
            entity.SubFixedLookup = this;
        }
    
        private void detach_EmpResumeEducations(EmpResumeEducation entity)
        {
            this.SendPropertyChanging("EmpResumeEducations");
            entity.SubFixedLookup = null;
        }

        private void attach_SubLookups(SubLookup entity)
        {
            this.SendPropertyChanging("SubLookups");
            entity.SubFixedLookup = this;
        }
    
        private void detach_SubLookups(SubLookup entity)
        {
            this.SendPropertyChanging("SubLookups");
            entity.SubFixedLookup = null;
        }

        private void attach_SubUsers(SubUser entity)
        {
            this.SendPropertyChanging("SubUsers");
            entity.SubFixedLookup = this;
        }
    
        private void detach_SubUsers(SubUser entity)
        {
            this.SendPropertyChanging("SubUsers");
            entity.SubFixedLookup = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubLookup in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Lookup")]
    public partial class SubLookup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LookupId;

        private int _LookupTypeId;

        private string _Lookup;
        #pragma warning restore 0649

        private EntityRef<SubFixedLookup> _SubFixedLookup;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLookupIdChanging(int value);
        partial void OnLookupIdChanged();
        partial void OnLookupTypeIdChanging(int value);
        partial void OnLookupTypeIdChanged();
        partial void OnLookupChanging(string value);
        partial void OnLookupChanged();
        #endregion

        public SubLookup()
        {
            this._SubFixedLookup  = default(EntityRef<SubFixedLookup>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LookupId in the schema.
        /// </summary>
        [Column(Storage = "_LookupId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LookupId
        {
            get
            {
                return this._LookupId;
            }
            set
            {
                if (this._LookupId != value)
                {
                    this.OnLookupIdChanging(value);
                    this.SendPropertyChanging("LookupId");
                    this._LookupId = value;
                    this.SendPropertyChanged("LookupId");
                    this.OnLookupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LookupTypeId in the schema.
        /// </summary>
        [Column(Storage = "_LookupTypeId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LookupTypeId
        {
            get
            {
                return this._LookupTypeId;
            }
            set
            {
                if (this._LookupTypeId != value)
                {
                    if (this._SubFixedLookup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLookupTypeIdChanging(value);
                    this.SendPropertyChanging("LookupTypeId");
                    this._LookupTypeId = value;
                    this.SendPropertyChanged("LookupTypeId");
                    this.OnLookupTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lookup in the schema.
        /// </summary>
        [Column(Storage = "_Lookup", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Lookup
        {
            get
            {
                return this._Lookup;
            }
            set
            {
                if (this._Lookup != value)
                {
                    this.OnLookupChanging(value);
                    this.SendPropertyChanging("Lookup");
                    this._Lookup = value;
                    this.SendPropertyChanged("Lookup");
                    this.OnLookupChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubFixedLookup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_SubLookup", Storage="_SubFixedLookup", ThisKey="LookupTypeId", OtherKey="FixedLookupId", IsForeignKey=true)]
        public SubFixedLookup SubFixedLookup
        {
            get
            {
                return this._SubFixedLookup.Entity;
            }
            set
            {
                SubFixedLookup previousValue = this._SubFixedLookup.Entity;
                if ((previousValue != value) || (this._SubFixedLookup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubFixedLookup");
                    if (previousValue != null)
                    {
                        this._SubFixedLookup.Entity = null;
                        previousValue.SubLookups.Remove(this);
                    }
                    this._SubFixedLookup.Entity = value;
                    if (value != null)
                    {
                        this._LookupTypeId = value.FixedLookupId;
                        value.SubLookups.Add(this);
                    }
                    else
                    {
                        this._LookupTypeId = default(int);
                    }
                    this.SendPropertyChanged("SubFixedLookup");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubOTP in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_OTPs")]
    public partial class SubOTP : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _OTPId;

        private string _OTP;

        private string _DeviceToken;

        private System.DateTime _ExpiryDate;

        private int _UId;

        private bool _IsUsed;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOTPIdChanging(int value);
        partial void OnOTPIdChanged();
        partial void OnOTPChanging(string value);
        partial void OnOTPChanged();
        partial void OnDeviceTokenChanging(string value);
        partial void OnDeviceTokenChanged();
        partial void OnExpiryDateChanging(System.DateTime value);
        partial void OnExpiryDateChanged();
        partial void OnUIdChanging(int value);
        partial void OnUIdChanged();
        partial void OnIsUsedChanging(bool value);
        partial void OnIsUsedChanged();
        #endregion

        public SubOTP()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for OTPId in the schema.
        /// </summary>
        [Column(Storage = "_OTPId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int OTPId
        {
            get
            {
                return this._OTPId;
            }
            set
            {
                if (this._OTPId != value)
                {
                    this.OnOTPIdChanging(value);
                    this.SendPropertyChanging("OTPId");
                    this._OTPId = value;
                    this.SendPropertyChanged("OTPId");
                    this.OnOTPIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OTP in the schema.
        /// </summary>
        [Column(Storage = "_OTP", CanBeNull = false, DbType = "VARCHAR(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string OTP
        {
            get
            {
                return this._OTP;
            }
            set
            {
                if (this._OTP != value)
                {
                    this.OnOTPChanging(value);
                    this.SendPropertyChanging("OTP");
                    this._OTP = value;
                    this.SendPropertyChanged("OTP");
                    this.OnOTPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceToken in the schema.
        /// </summary>
        [Column(Storage = "_DeviceToken", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string DeviceToken
        {
            get
            {
                return this._DeviceToken;
            }
            set
            {
                if (this._DeviceToken != value)
                {
                    this.OnDeviceTokenChanging(value);
                    this.SendPropertyChanging("DeviceToken");
                    this._DeviceToken = value;
                    this.SendPropertyChanged("DeviceToken");
                    this.OnDeviceTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDate in the schema.
        /// </summary>
        [Column(Storage = "_ExpiryDate", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ExpiryDate
        {
            get
            {
                return this._ExpiryDate;
            }
            set
            {
                if (this._ExpiryDate != value)
                {
                    this.OnExpiryDateChanging(value);
                    this.SendPropertyChanging("ExpiryDate");
                    this._ExpiryDate = value;
                    this.SendPropertyChanged("ExpiryDate");
                    this.OnExpiryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsUsed in the schema.
        /// </summary>
        [Column(Storage = "_IsUsed", CanBeNull = false, DbType = "BIT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool IsUsed
        {
            get
            {
                return this._IsUsed;
            }
            set
            {
                if (this._IsUsed != value)
                {
                    this.OnIsUsedChanging(value);
                    this.SendPropertyChanging("IsUsed");
                    this._IsUsed = value;
                    this.SendPropertyChanged("IsUsed");
                    this.OnIsUsedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubOTP", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.SubOTPs.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.SubOTPs.Add(this);
                    }
                    else
                    {
                        this._UId = default(int);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubRoleController in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Role_Controllers")]
    public partial class SubRoleController : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RId;

        private int _CId;
        #pragma warning restore 0649

        private EntityRef<SubRole> _SubRole;

        private EntityRef<DevController> _DevController;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRIdChanging(int value);
        partial void OnRIdChanged();
        partial void OnCIdChanging(int value);
        partial void OnCIdChanged();
        #endregion

        public SubRoleController()
        {
            this._SubRole  = default(EntityRef<SubRole>);
            this._DevController  = default(EntityRef<DevController>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RId in the schema.
        /// </summary>
        [Column(Storage = "_RId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RId
        {
            get
            {
                return this._RId;
            }
            set
            {
                if (this._RId != value)
                {
                    if (this._SubRole.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRIdChanging(value);
                    this.SendPropertyChanging("RId");
                    this._RId = value;
                    this.SendPropertyChanged("RId");
                    this.OnRIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CId in the schema.
        /// </summary>
        [Column(Storage = "_CId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int CId
        {
            get
            {
                return this._CId;
            }
            set
            {
                if (this._CId != value)
                {
                    if (this._DevController.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCIdChanging(value);
                    this.SendPropertyChanging("CId");
                    this._CId = value;
                    this.SendPropertyChanged("CId");
                    this.OnCIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubRole in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubRole_SubRoleController", Storage="_SubRole", ThisKey="RId", OtherKey="RId", IsForeignKey=true)]
        public SubRole SubRole
        {
            get
            {
                return this._SubRole.Entity;
            }
            set
            {
                SubRole previousValue = this._SubRole.Entity;
                if ((previousValue != value) || (this._SubRole.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubRole");
                    if (previousValue != null)
                    {
                        this._SubRole.Entity = null;
                        previousValue.SubRoleControllers.Remove(this);
                    }
                    this._SubRole.Entity = value;
                    if (value != null)
                    {
                        this._RId = value.RId;
                        value.SubRoleControllers.Add(this);
                    }
                    else
                    {
                        this._RId = default(int);
                    }
                    this.SendPropertyChanged("SubRole");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevController in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevController_SubRoleController", Storage="_DevController", ThisKey="CId", OtherKey="CId", IsForeignKey=true)]
        public DevController DevController
        {
            get
            {
                return this._DevController.Entity;
            }
            set
            {
                DevController previousValue = this._DevController.Entity;
                if ((previousValue != value) || (this._DevController.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevController");
                    if (previousValue != null)
                    {
                        this._DevController.Entity = null;
                        previousValue.SubRoleControllers.Remove(this);
                    }
                    this._DevController.Entity = value;
                    if (value != null)
                    {
                        this._CId = value.CId;
                        value.SubRoleControllers.Add(this);
                    }
                    else
                    {
                        this._CId = default(int);
                    }
                    this.SendPropertyChanged("DevController");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubRole in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Roles")]
    public partial class SubRole : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RId;

        private int? _OId;

        private string _RoleName;

        private int? _LoginTypeId;
        #pragma warning restore 0649

        private EntitySet<OrgStaffsAttendancesDaily> _OrgStaffsAttendancesDailies;

        private EntitySet<SubRoleController> _SubRoleControllers;

        private EntityRef<DevOrganisation> _DevOrganisation;

        private EntitySet<SubUserOrganisation> _SubUserOrganisations;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRIdChanging(int value);
        partial void OnRIdChanged();
        partial void OnOIdChanging(int? value);
        partial void OnOIdChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        partial void OnLoginTypeIdChanging(int? value);
        partial void OnLoginTypeIdChanged();
        #endregion

        public SubRole()
        {
            this._OrgStaffsAttendancesDailies = new EntitySet<OrgStaffsAttendancesDaily>(new Action<OrgStaffsAttendancesDaily>(this.attach_OrgStaffsAttendancesDailies), new Action<OrgStaffsAttendancesDaily>(this.detach_OrgStaffsAttendancesDailies));
            this._SubRoleControllers = new EntitySet<SubRoleController>(new Action<SubRoleController>(this.attach_SubRoleControllers), new Action<SubRoleController>(this.detach_SubRoleControllers));
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            this._SubUserOrganisations = new EntitySet<SubUserOrganisation>(new Action<SubUserOrganisation>(this.attach_SubUserOrganisations), new Action<SubUserOrganisation>(this.detach_SubUserOrganisations));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RId in the schema.
        /// </summary>
        [Column(Storage = "_RId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int RId
        {
            get
            {
                return this._RId;
            }
            set
            {
                if (this._RId != value)
                {
                    this.OnRIdChanging(value);
                    this.SendPropertyChanging("RId");
                    this._RId = value;
                    this.SendPropertyChanged("RId");
                    this.OnRIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleName in the schema.
        /// </summary>
        [Column(Storage = "_RoleName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if (this._RoleName != value)
                {
                    this.OnRoleNameChanging(value);
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginTypeId in the schema.
        /// </summary>
        [Column(Storage = "_LoginTypeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LoginTypeId
        {
            get
            {
                return this._LoginTypeId;
            }
            set
            {
                if (this._LoginTypeId != value)
                {
                    this.OnLoginTypeIdChanging(value);
                    this.SendPropertyChanging("LoginTypeId");
                    this._LoginTypeId = value;
                    this.SendPropertyChanged("LoginTypeId");
                    this.OnLoginTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OrgStaffsAttendancesDailies in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubRole_OrgStaffsAttendancesDaily", Storage="_OrgStaffsAttendancesDailies", ThisKey="RId", OtherKey="RId", DeleteRule="NO ACTION")]
        public EntitySet<OrgStaffsAttendancesDaily> OrgStaffsAttendancesDailies
        {
            get
            {
                return this._OrgStaffsAttendancesDailies;
            }
            set
            {
                this._OrgStaffsAttendancesDailies.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubRoleControllers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubRole_SubRoleController", Storage="_SubRoleControllers", ThisKey="RId", OtherKey="RId", DeleteRule="NO ACTION")]
        public EntitySet<SubRoleController> SubRoleControllers
        {
            get
            {
                return this._SubRoleControllers;
            }
            set
            {
                this._SubRoleControllers.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_SubRole", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.SubRoles.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.SubRoles.Add(this);
                    }
                    else
                    {
                        this._OId = default(int?);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUserOrganisations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubRole_SubUserOrganisation", Storage="_SubUserOrganisations", ThisKey="RId", OtherKey="RId", DeleteRule="NO ACTION")]
        public EntitySet<SubUserOrganisation> SubUserOrganisations
        {
            get
            {
                return this._SubUserOrganisations;
            }
            set
            {
                this._SubUserOrganisations.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrgStaffsAttendancesDailies(OrgStaffsAttendancesDaily entity)
        {
            this.SendPropertyChanging("OrgStaffsAttendancesDailies");
            entity.SubRole = this;
        }
    
        private void detach_OrgStaffsAttendancesDailies(OrgStaffsAttendancesDaily entity)
        {
            this.SendPropertyChanging("OrgStaffsAttendancesDailies");
            entity.SubRole = null;
        }

        private void attach_SubRoleControllers(SubRoleController entity)
        {
            this.SendPropertyChanging("SubRoleControllers");
            entity.SubRole = this;
        }
    
        private void detach_SubRoleControllers(SubRoleController entity)
        {
            this.SendPropertyChanging("SubRoleControllers");
            entity.SubRole = null;
        }

        private void attach_SubUserOrganisations(SubUserOrganisation entity)
        {
            this.SendPropertyChanging("SubUserOrganisations");
            entity.SubRole = this;
        }
    
        private void detach_SubUserOrganisations(SubUserOrganisation entity)
        {
            this.SendPropertyChanging("SubUserOrganisations");
            entity.SubRole = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubUserOrganisation in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_User_Organisations")]
    public partial class SubUserOrganisation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UId;

        private int _OId;

        private int _RId;

        private int _URId;
        #pragma warning restore 0649

        private EntitySet<DevOrganisationsStaff> _DevOrganisationsStaffs;

        private EntitySet<OrgStaffsLeaveApplication> _OrgStaffsLeaveApplications;

        private EntityRef<SubRole> _SubRole;

        private EntityRef<SubUser> _SubUser;

        private EntityRef<DevOrganisation> _DevOrganisation;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUIdChanging(int value);
        partial void OnUIdChanged();
        partial void OnOIdChanging(int value);
        partial void OnOIdChanged();
        partial void OnRIdChanging(int value);
        partial void OnRIdChanged();
        partial void OnURIdChanging(int value);
        partial void OnURIdChanged();
        #endregion

        public SubUserOrganisation()
        {
            this._DevOrganisationsStaffs = new EntitySet<DevOrganisationsStaff>(new Action<DevOrganisationsStaff>(this.attach_DevOrganisationsStaffs), new Action<DevOrganisationsStaff>(this.detach_DevOrganisationsStaffs));
            this._OrgStaffsLeaveApplications = new EntitySet<OrgStaffsLeaveApplication>(new Action<OrgStaffsLeaveApplication>(this.attach_OrgStaffsLeaveApplications), new Action<OrgStaffsLeaveApplication>(this.detach_OrgStaffsLeaveApplications));
            this._SubRole  = default(EntityRef<SubRole>);
            this._SubUser  = default(EntityRef<SubUser>);
            this._DevOrganisation  = default(EntityRef<DevOrganisation>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OId in the schema.
        /// </summary>
        [Column(Storage = "_OId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int OId
        {
            get
            {
                return this._OId;
            }
            set
            {
                if (this._OId != value)
                {
                    if (this._DevOrganisation.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOIdChanging(value);
                    this.SendPropertyChanging("OId");
                    this._OId = value;
                    this.SendPropertyChanged("OId");
                    this.OnOIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RId in the schema.
        /// </summary>
        [Column(Storage = "_RId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int RId
        {
            get
            {
                return this._RId;
            }
            set
            {
                if (this._RId != value)
                {
                    if (this._SubRole.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRIdChanging(value);
                    this.SendPropertyChanging("RId");
                    this._RId = value;
                    this.SendPropertyChanged("RId");
                    this.OnRIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for URId in the schema.
        /// </summary>
        [Column(Storage = "_URId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int URId
        {
            get
            {
                return this._URId;
            }
            set
            {
                if (this._URId != value)
                {
                    this.OnURIdChanging(value);
                    this.SendPropertyChanging("URId");
                    this._URId = value;
                    this.SendPropertyChanged("URId");
                    this.OnURIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationsStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUserOrganisation_DevOrganisationsStaff", Storage="_DevOrganisationsStaffs", ThisKey="URId", OtherKey="URId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationsStaff> DevOrganisationsStaffs
        {
            get
            {
                return this._DevOrganisationsStaffs;
            }
            set
            {
                this._DevOrganisationsStaffs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for OrgStaffsLeaveApplications in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUserOrganisation_OrgStaffsLeaveApplication", Storage="_OrgStaffsLeaveApplications", ThisKey="URId", OtherKey="URId", DeleteRule="NO ACTION")]
        public EntitySet<OrgStaffsLeaveApplication> OrgStaffsLeaveApplications
        {
            get
            {
                return this._OrgStaffsLeaveApplications;
            }
            set
            {
                this._OrgStaffsLeaveApplications.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubRole in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubRole_SubUserOrganisation", Storage="_SubRole", ThisKey="RId", OtherKey="RId", IsForeignKey=true)]
        public SubRole SubRole
        {
            get
            {
                return this._SubRole.Entity;
            }
            set
            {
                SubRole previousValue = this._SubRole.Entity;
                if ((previousValue != value) || (this._SubRole.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubRole");
                    if (previousValue != null)
                    {
                        this._SubRole.Entity = null;
                        previousValue.SubUserOrganisations.Remove(this);
                    }
                    this._SubRole.Entity = value;
                    if (value != null)
                    {
                        this._RId = value.RId;
                        value.SubUserOrganisations.Add(this);
                    }
                    else
                    {
                        this._RId = default(int);
                    }
                    this.SendPropertyChanged("SubRole");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUserOrganisation", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.SubUserOrganisations.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.SubUserOrganisations.Add(this);
                    }
                    else
                    {
                        this._UId = default(int);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisation in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DevOrganisation_SubUserOrganisation", Storage="_DevOrganisation", ThisKey="OId", OtherKey="OId", IsForeignKey=true)]
        public DevOrganisation DevOrganisation
        {
            get
            {
                return this._DevOrganisation.Entity;
            }
            set
            {
                DevOrganisation previousValue = this._DevOrganisation.Entity;
                if ((previousValue != value) || (this._DevOrganisation.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("DevOrganisation");
                    if (previousValue != null)
                    {
                        this._DevOrganisation.Entity = null;
                        previousValue.SubUserOrganisations.Remove(this);
                    }
                    this._DevOrganisation.Entity = value;
                    if (value != null)
                    {
                        this._OId = value.OId;
                        value.SubUserOrganisations.Add(this);
                    }
                    else
                    {
                        this._OId = default(int);
                    }
                    this.SendPropertyChanged("DevOrganisation");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.SubUserOrganisation = this;
        }
    
        private void detach_DevOrganisationsStaffs(DevOrganisationsStaff entity)
        {
            this.SendPropertyChanging("DevOrganisationsStaffs");
            entity.SubUserOrganisation = null;
        }

        private void attach_OrgStaffsLeaveApplications(OrgStaffsLeaveApplication entity)
        {
            this.SendPropertyChanging("OrgStaffsLeaveApplications");
            entity.SubUserOrganisation = this;
        }
    
        private void detach_OrgStaffsLeaveApplications(OrgStaffsLeaveApplication entity)
        {
            this.SendPropertyChanging("OrgStaffsLeaveApplications");
            entity.SubUserOrganisation = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubUserToken in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_User_Tokens")]
    public partial class SubUserToken : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _LoginId;

        private int? _UId;

        private string _Token;

        private string _DeviceToken;

        private string _DeviceProfile;

        private System.DateTime? _ExpiryDate;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnLoginIdChanging(int value);
        partial void OnLoginIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        partial void OnTokenChanging(string value);
        partial void OnTokenChanged();
        partial void OnDeviceTokenChanging(string value);
        partial void OnDeviceTokenChanged();
        partial void OnDeviceProfileChanging(string value);
        partial void OnDeviceProfileChanged();
        partial void OnExpiryDateChanging(System.DateTime? value);
        partial void OnExpiryDateChanged();
        #endregion

        public SubUserToken()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for LoginId in the schema.
        /// </summary>
        [Column(Storage = "_LoginId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int LoginId
        {
            get
            {
                return this._LoginId;
            }
            set
            {
                if (this._LoginId != value)
                {
                    this.OnLoginIdChanging(value);
                    this.SendPropertyChanging("LoginId");
                    this._LoginId = value;
                    this.SendPropertyChanged("LoginId");
                    this.OnLoginIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Token in the schema.
        /// </summary>
        [Column(Storage = "_Token", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Token
        {
            get
            {
                return this._Token;
            }
            set
            {
                if (this._Token != value)
                {
                    this.OnTokenChanging(value);
                    this.SendPropertyChanging("Token");
                    this._Token = value;
                    this.SendPropertyChanged("Token");
                    this.OnTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceToken in the schema.
        /// </summary>
        [Column(Storage = "_DeviceToken", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string DeviceToken
        {
            get
            {
                return this._DeviceToken;
            }
            set
            {
                if (this._DeviceToken != value)
                {
                    this.OnDeviceTokenChanging(value);
                    this.SendPropertyChanging("DeviceToken");
                    this._DeviceToken = value;
                    this.SendPropertyChanged("DeviceToken");
                    this.OnDeviceTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DeviceProfile in the schema.
        /// </summary>
        [Column(Storage = "_DeviceProfile", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string DeviceProfile
        {
            get
            {
                return this._DeviceProfile;
            }
            set
            {
                if (this._DeviceProfile != value)
                {
                    this.OnDeviceProfileChanging(value);
                    this.SendPropertyChanging("DeviceProfile");
                    this._DeviceProfile = value;
                    this.SendPropertyChanged("DeviceProfile");
                    this.OnDeviceProfileChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExpiryDate in the schema.
        /// </summary>
        [Column(Storage = "_ExpiryDate", DbType = "DATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? ExpiryDate
        {
            get
            {
                return this._ExpiryDate;
            }
            set
            {
                if (this._ExpiryDate != value)
                {
                    this.OnExpiryDateChanging(value);
                    this.SendPropertyChanging("ExpiryDate");
                    this._ExpiryDate = value;
                    this.SendPropertyChanged("ExpiryDate");
                    this.OnExpiryDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUserToken", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.SubUserTokens.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.SubUserTokens.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubUser in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Users")]
    public partial class SubUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UId;

        private string _MobileNumber;

        private int _DefaultLanguageId;

        private int? _LoginTypeId;
        #pragma warning restore 0649

        private EntitySet<DevOrganisationBranch> _DevOrganisationBranches;

        private EntitySet<DevOrganisation> _DevOrganisations;

        private EntitySet<EmpApplyJobDetail> _EmpApplyJobDetails;

        private EntitySet<EmpBookmarkJobsDetail> _EmpBookmarkJobsDetails;

        private EntitySet<EmpResumeAbout> _EmpResumeAbouts;

        private EntitySet<EmpResumeEducation> _EmpResumeEducations;

        private EntitySet<EmpResumeOtherCertificate> _EmpResumeOtherCertificates;

        private EntitySet<EmpResumeSkill> _EmpResumeSkills;

        private EntitySet<EmpResumeWorkExperience> _EmpResumeWorkExperiences;

        private EntitySet<EmprJob> _EmprJobs;

        private EntitySet<SubOTP> _SubOTPs;

        private EntitySet<SubUserOrganisation> _SubUserOrganisations;

        private EntitySet<SubUserToken> _SubUserTokens;

        private EntityRef<SubFixedLookup> _SubFixedLookup;

        private EntityRef<SubUsersDetail> _SubUsersDetail;

        private EntitySet<SubUsersIdentity> _SubUsersIdentities;

        private EntitySet<SubUsersTotalworkexperience> _SubUsersTotalworkexperiences;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUIdChanging(int value);
        partial void OnUIdChanged();
        partial void OnMobileNumberChanging(string value);
        partial void OnMobileNumberChanged();
        partial void OnDefaultLanguageIdChanging(int value);
        partial void OnDefaultLanguageIdChanged();
        partial void OnLoginTypeIdChanging(int? value);
        partial void OnLoginTypeIdChanged();
        #endregion

        public SubUser()
        {
            this._DevOrganisationBranches = new EntitySet<DevOrganisationBranch>(new Action<DevOrganisationBranch>(this.attach_DevOrganisationBranches), new Action<DevOrganisationBranch>(this.detach_DevOrganisationBranches));
            this._DevOrganisations = new EntitySet<DevOrganisation>(new Action<DevOrganisation>(this.attach_DevOrganisations), new Action<DevOrganisation>(this.detach_DevOrganisations));
            this._EmpApplyJobDetails = new EntitySet<EmpApplyJobDetail>(new Action<EmpApplyJobDetail>(this.attach_EmpApplyJobDetails), new Action<EmpApplyJobDetail>(this.detach_EmpApplyJobDetails));
            this._EmpBookmarkJobsDetails = new EntitySet<EmpBookmarkJobsDetail>(new Action<EmpBookmarkJobsDetail>(this.attach_EmpBookmarkJobsDetails), new Action<EmpBookmarkJobsDetail>(this.detach_EmpBookmarkJobsDetails));
            this._EmpResumeAbouts = new EntitySet<EmpResumeAbout>(new Action<EmpResumeAbout>(this.attach_EmpResumeAbouts), new Action<EmpResumeAbout>(this.detach_EmpResumeAbouts));
            this._EmpResumeEducations = new EntitySet<EmpResumeEducation>(new Action<EmpResumeEducation>(this.attach_EmpResumeEducations), new Action<EmpResumeEducation>(this.detach_EmpResumeEducations));
            this._EmpResumeOtherCertificates = new EntitySet<EmpResumeOtherCertificate>(new Action<EmpResumeOtherCertificate>(this.attach_EmpResumeOtherCertificates), new Action<EmpResumeOtherCertificate>(this.detach_EmpResumeOtherCertificates));
            this._EmpResumeSkills = new EntitySet<EmpResumeSkill>(new Action<EmpResumeSkill>(this.attach_EmpResumeSkills), new Action<EmpResumeSkill>(this.detach_EmpResumeSkills));
            this._EmpResumeWorkExperiences = new EntitySet<EmpResumeWorkExperience>(new Action<EmpResumeWorkExperience>(this.attach_EmpResumeWorkExperiences), new Action<EmpResumeWorkExperience>(this.detach_EmpResumeWorkExperiences));
            this._EmprJobs = new EntitySet<EmprJob>(new Action<EmprJob>(this.attach_EmprJobs), new Action<EmprJob>(this.detach_EmprJobs));
            this._SubOTPs = new EntitySet<SubOTP>(new Action<SubOTP>(this.attach_SubOTPs), new Action<SubOTP>(this.detach_SubOTPs));
            this._SubUserOrganisations = new EntitySet<SubUserOrganisation>(new Action<SubUserOrganisation>(this.attach_SubUserOrganisations), new Action<SubUserOrganisation>(this.detach_SubUserOrganisations));
            this._SubUserTokens = new EntitySet<SubUserToken>(new Action<SubUserToken>(this.attach_SubUserTokens), new Action<SubUserToken>(this.detach_SubUserTokens));
            this._SubFixedLookup  = default(EntityRef<SubFixedLookup>);
            this._SubUsersDetail  = default(EntityRef<SubUsersDetail>);
            this._SubUsersIdentities = new EntitySet<SubUsersIdentity>(new Action<SubUsersIdentity>(this.attach_SubUsersIdentities), new Action<SubUsersIdentity>(this.detach_SubUsersIdentities));
            this._SubUsersTotalworkexperiences = new EntitySet<SubUsersTotalworkexperience>(new Action<SubUsersTotalworkexperience>(this.attach_SubUsersTotalworkexperiences), new Action<SubUsersTotalworkexperience>(this.detach_SubUsersTotalworkexperiences));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUsersDetail.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MobileNumber in the schema.
        /// </summary>
        [Column(Storage = "_MobileNumber", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MobileNumber
        {
            get
            {
                return this._MobileNumber;
            }
            set
            {
                if (this._MobileNumber != value)
                {
                    this.OnMobileNumberChanging(value);
                    this.SendPropertyChanging("MobileNumber");
                    this._MobileNumber = value;
                    this.SendPropertyChanged("MobileNumber");
                    this.OnMobileNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DefaultLanguageId in the schema.
        /// </summary>
        [Column(Storage = "_DefaultLanguageId", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int DefaultLanguageId
        {
            get
            {
                return this._DefaultLanguageId;
            }
            set
            {
                if (this._DefaultLanguageId != value)
                {
                    this.OnDefaultLanguageIdChanging(value);
                    this.SendPropertyChanging("DefaultLanguageId");
                    this._DefaultLanguageId = value;
                    this.SendPropertyChanged("DefaultLanguageId");
                    this.OnDefaultLanguageIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LoginTypeId in the schema.
        /// </summary>
        [Column(Storage = "_LoginTypeId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? LoginTypeId
        {
            get
            {
                return this._LoginTypeId;
            }
            set
            {
                if (this._LoginTypeId != value)
                {
                    if (this._SubFixedLookup.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLoginTypeIdChanging(value);
                    this.SendPropertyChanging("LoginTypeId");
                    this._LoginTypeId = value;
                    this.SendPropertyChanged("LoginTypeId");
                    this.OnLoginTypeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisationBranches in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_DevOrganisationBranch", Storage="_DevOrganisationBranches", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisationBranch> DevOrganisationBranches
        {
            get
            {
                return this._DevOrganisationBranches;
            }
            set
            {
                this._DevOrganisationBranches.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DevOrganisations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_DevOrganisation", Storage="_DevOrganisations", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<DevOrganisation> DevOrganisations
        {
            get
            {
                return this._DevOrganisations;
            }
            set
            {
                this._DevOrganisations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpApplyJobDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpApplyJobDetail", Storage="_EmpApplyJobDetails", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpApplyJobDetail> EmpApplyJobDetails
        {
            get
            {
                return this._EmpApplyJobDetails;
            }
            set
            {
                this._EmpApplyJobDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpBookmarkJobsDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpBookmarkJobsDetail", Storage="_EmpBookmarkJobsDetails", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpBookmarkJobsDetail> EmpBookmarkJobsDetails
        {
            get
            {
                return this._EmpBookmarkJobsDetails;
            }
            set
            {
                this._EmpBookmarkJobsDetails.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeAbouts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeAbout", Storage="_EmpResumeAbouts", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeAbout> EmpResumeAbouts
        {
            get
            {
                return this._EmpResumeAbouts;
            }
            set
            {
                this._EmpResumeAbouts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeEducations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeEducation", Storage="_EmpResumeEducations", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeEducation> EmpResumeEducations
        {
            get
            {
                return this._EmpResumeEducations;
            }
            set
            {
                this._EmpResumeEducations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeOtherCertificates in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeOtherCertificate", Storage="_EmpResumeOtherCertificates", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeOtherCertificate> EmpResumeOtherCertificates
        {
            get
            {
                return this._EmpResumeOtherCertificates;
            }
            set
            {
                this._EmpResumeOtherCertificates.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeSkills in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeSkill", Storage="_EmpResumeSkills", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeSkill> EmpResumeSkills
        {
            get
            {
                return this._EmpResumeSkills;
            }
            set
            {
                this._EmpResumeSkills.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmpResumeWorkExperiences in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmpResumeWorkExperience", Storage="_EmpResumeWorkExperiences", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmpResumeWorkExperience> EmpResumeWorkExperiences
        {
            get
            {
                return this._EmpResumeWorkExperiences;
            }
            set
            {
                this._EmpResumeWorkExperiences.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EmprJobs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_EmprJob", Storage="_EmprJobs", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<EmprJob> EmprJobs
        {
            get
            {
                return this._EmprJobs;
            }
            set
            {
                this._EmprJobs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubOTPs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubOTP", Storage="_SubOTPs", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<SubOTP> SubOTPs
        {
            get
            {
                return this._SubOTPs;
            }
            set
            {
                this._SubOTPs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUserOrganisations in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUserOrganisation", Storage="_SubUserOrganisations", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<SubUserOrganisation> SubUserOrganisations
        {
            get
            {
                return this._SubUserOrganisations;
            }
            set
            {
                this._SubUserOrganisations.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUserTokens in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUserToken", Storage="_SubUserTokens", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<SubUserToken> SubUserTokens
        {
            get
            {
                return this._SubUserTokens;
            }
            set
            {
                this._SubUserTokens.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubFixedLookup in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubFixedLookup_SubUser", Storage="_SubFixedLookup", ThisKey="LoginTypeId", OtherKey="FixedLookupId", IsForeignKey=true)]
        public SubFixedLookup SubFixedLookup
        {
            get
            {
                return this._SubFixedLookup.Entity;
            }
            set
            {
                SubFixedLookup previousValue = this._SubFixedLookup.Entity;
                if ((previousValue != value) || (this._SubFixedLookup.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubFixedLookup");
                    if (previousValue != null)
                    {
                        this._SubFixedLookup.Entity = null;
                        previousValue.SubUsers.Remove(this);
                    }
                    this._SubFixedLookup.Entity = value;
                    if (value != null)
                    {
                        this._LoginTypeId = value.FixedLookupId;
                        value.SubUsers.Add(this);
                    }
                    else
                    {
                        this._LoginTypeId = default(int?);
                    }
                    this.SendPropertyChanged("SubFixedLookup");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersDetail in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUsersDetail", Storage="_SubUsersDetail", ThisKey="UId", OtherKey="UId", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public SubUsersDetail SubUsersDetail
        {
            get
            {
                return this._SubUsersDetail.Entity;
            }
            set
            {
                SubUsersDetail previousValue = this._SubUsersDetail.Entity;
                if ((previousValue != value) || (this._SubUsersDetail.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUsersDetail");
                    if (previousValue != null)
                    {
                        this._SubUsersDetail.Entity = null;
                        previousValue.SubUser = null;
                    }
                    this._SubUsersDetail.Entity = value;
                    if (value != null)
                    {
                        value.SubUser = this;
                    }
                    this.SendPropertyChanged("SubUsersDetail");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersIdentities in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUsersIdentity", Storage="_SubUsersIdentities", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersIdentity> SubUsersIdentities
        {
            get
            {
                return this._SubUsersIdentities;
            }
            set
            {
                this._SubUsersIdentities.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for SubUsersTotalworkexperiences in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUsersTotalworkexperience", Storage="_SubUsersTotalworkexperiences", ThisKey="UId", OtherKey="UId", DeleteRule="NO ACTION")]
        public EntitySet<SubUsersTotalworkexperience> SubUsersTotalworkexperiences
        {
            get
            {
                return this._SubUsersTotalworkexperiences;
            }
            set
            {
                this._SubUsersTotalworkexperiences.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DevOrganisationBranches(DevOrganisationBranch entity)
        {
            this.SendPropertyChanging("DevOrganisationBranches");
            entity.SubUser = this;
        }
    
        private void detach_DevOrganisationBranches(DevOrganisationBranch entity)
        {
            this.SendPropertyChanging("DevOrganisationBranches");
            entity.SubUser = null;
        }

        private void attach_DevOrganisations(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations");
            entity.SubUser = this;
        }
    
        private void detach_DevOrganisations(DevOrganisation entity)
        {
            this.SendPropertyChanging("DevOrganisations");
            entity.SubUser = null;
        }

        private void attach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.SubUser = this;
        }
    
        private void detach_EmpApplyJobDetails(EmpApplyJobDetail entity)
        {
            this.SendPropertyChanging("EmpApplyJobDetails");
            entity.SubUser = null;
        }

        private void attach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.SubUser = this;
        }
    
        private void detach_EmpBookmarkJobsDetails(EmpBookmarkJobsDetail entity)
        {
            this.SendPropertyChanging("EmpBookmarkJobsDetails");
            entity.SubUser = null;
        }

        private void attach_EmpResumeAbouts(EmpResumeAbout entity)
        {
            this.SendPropertyChanging("EmpResumeAbouts");
            entity.SubUser = this;
        }
    
        private void detach_EmpResumeAbouts(EmpResumeAbout entity)
        {
            this.SendPropertyChanging("EmpResumeAbouts");
            entity.SubUser = null;
        }

        private void attach_EmpResumeEducations(EmpResumeEducation entity)
        {
            this.SendPropertyChanging("EmpResumeEducations");
            entity.SubUser = this;
        }
    
        private void detach_EmpResumeEducations(EmpResumeEducation entity)
        {
            this.SendPropertyChanging("EmpResumeEducations");
            entity.SubUser = null;
        }

        private void attach_EmpResumeOtherCertificates(EmpResumeOtherCertificate entity)
        {
            this.SendPropertyChanging("EmpResumeOtherCertificates");
            entity.SubUser = this;
        }
    
        private void detach_EmpResumeOtherCertificates(EmpResumeOtherCertificate entity)
        {
            this.SendPropertyChanging("EmpResumeOtherCertificates");
            entity.SubUser = null;
        }

        private void attach_EmpResumeSkills(EmpResumeSkill entity)
        {
            this.SendPropertyChanging("EmpResumeSkills");
            entity.SubUser = this;
        }
    
        private void detach_EmpResumeSkills(EmpResumeSkill entity)
        {
            this.SendPropertyChanging("EmpResumeSkills");
            entity.SubUser = null;
        }

        private void attach_EmpResumeWorkExperiences(EmpResumeWorkExperience entity)
        {
            this.SendPropertyChanging("EmpResumeWorkExperiences");
            entity.SubUser = this;
        }
    
        private void detach_EmpResumeWorkExperiences(EmpResumeWorkExperience entity)
        {
            this.SendPropertyChanging("EmpResumeWorkExperiences");
            entity.SubUser = null;
        }

        private void attach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.SubUser = this;
        }
    
        private void detach_EmprJobs(EmprJob entity)
        {
            this.SendPropertyChanging("EmprJobs");
            entity.SubUser = null;
        }

        private void attach_SubOTPs(SubOTP entity)
        {
            this.SendPropertyChanging("SubOTPs");
            entity.SubUser = this;
        }
    
        private void detach_SubOTPs(SubOTP entity)
        {
            this.SendPropertyChanging("SubOTPs");
            entity.SubUser = null;
        }

        private void attach_SubUserOrganisations(SubUserOrganisation entity)
        {
            this.SendPropertyChanging("SubUserOrganisations");
            entity.SubUser = this;
        }
    
        private void detach_SubUserOrganisations(SubUserOrganisation entity)
        {
            this.SendPropertyChanging("SubUserOrganisations");
            entity.SubUser = null;
        }

        private void attach_SubUserTokens(SubUserToken entity)
        {
            this.SendPropertyChanging("SubUserTokens");
            entity.SubUser = this;
        }
    
        private void detach_SubUserTokens(SubUserToken entity)
        {
            this.SendPropertyChanging("SubUserTokens");
            entity.SubUser = null;
        }

        private void attach_SubUsersIdentities(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities");
            entity.SubUser = this;
        }
    
        private void detach_SubUsersIdentities(SubUsersIdentity entity)
        {
            this.SendPropertyChanging("SubUsersIdentities");
            entity.SubUser = null;
        }

        private void attach_SubUsersTotalworkexperiences(SubUsersTotalworkexperience entity)
        {
            this.SendPropertyChanging("SubUsersTotalworkexperiences");
            entity.SubUser = this;
        }
    
        private void detach_SubUsersTotalworkexperiences(SubUsersTotalworkexperience entity)
        {
            this.SendPropertyChanging("SubUsersTotalworkexperiences");
            entity.SubUser = null;
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubUsersDetail in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Users_Details")]
    public partial class SubUsersDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UId;

        private string _FullName;

        private string _Email;

        private string _AMobileNumber;

        private int? _AddressID;

        private int? _FileId;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        private EntityRef<CommonContactAddress> _CommonContactAddress;

        private EntityRef<CommonFile> _CommonFile;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUIdChanging(int value);
        partial void OnUIdChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAMobileNumberChanging(string value);
        partial void OnAMobileNumberChanged();
        partial void OnAddressIDChanging(int? value);
        partial void OnAddressIDChanged();
        partial void OnFileIdChanging(int? value);
        partial void OnFileIdChanged();
        #endregion

        public SubUsersDetail()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            this._CommonContactAddress  = default(EntityRef<CommonContactAddress>);
            this._CommonFile  = default(EntityRef<CommonFile>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FullName in the schema.
        /// </summary>
        [Column(Storage = "_FullName", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if (this._FullName != value)
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging("FullName");
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", DbType = "VARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AMobileNumber in the schema.
        /// </summary>
        [Column(Storage = "_AMobileNumber", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string AMobileNumber
        {
            get
            {
                return this._AMobileNumber;
            }
            set
            {
                if (this._AMobileNumber != value)
                {
                    this.OnAMobileNumberChanging(value);
                    this.SendPropertyChanging("AMobileNumber");
                    this._AMobileNumber = value;
                    this.SendPropertyChanged("AMobileNumber");
                    this.OnAMobileNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AddressID in the schema.
        /// </summary>
        [Column(Storage = "_AddressID", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? AddressID
        {
            get
            {
                return this._AddressID;
            }
            set
            {
                if (this._AddressID != value)
                {
                    if (this._CommonContactAddress.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAddressIDChanging(value);
                    this.SendPropertyChanging("AddressID");
                    this._AddressID = value;
                    this.SendPropertyChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FileId in the schema.
        /// </summary>
        [Column(Storage = "_FileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? FileId
        {
            get
            {
                return this._FileId;
            }
            set
            {
                if (this._FileId != value)
                {
                    if (this._CommonFile.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnFileIdChanging(value);
                    this.SendPropertyChanging("FileId");
                    this._FileId = value;
                    this.SendPropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUsersDetail", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.SubUsersDetail = null;
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.SubUsersDetail = this;
                    }
                    else
                    {
                        this._UId = default(int);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonContactAddress in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonContactAddress_SubUsersDetail", Storage="_CommonContactAddress", ThisKey="AddressID", OtherKey="ContactAddressId", IsForeignKey=true)]
        public CommonContactAddress CommonContactAddress
        {
            get
            {
                return this._CommonContactAddress.Entity;
            }
            set
            {
                CommonContactAddress previousValue = this._CommonContactAddress.Entity;
                if ((previousValue != value) || (this._CommonContactAddress.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonContactAddress");
                    if (previousValue != null)
                    {
                        this._CommonContactAddress.Entity = null;
                        previousValue.SubUsersDetails.Remove(this);
                    }
                    this._CommonContactAddress.Entity = value;
                    if (value != null)
                    {
                        this._AddressID = value.ContactAddressId;
                        value.SubUsersDetails.Add(this);
                    }
                    else
                    {
                        this._AddressID = default(int?);
                    }
                    this.SendPropertyChanged("CommonContactAddress");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersDetail", Storage="_CommonFile", ThisKey="FileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile
        {
            get
            {
                return this._CommonFile.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile.Entity;
                if ((previousValue != value) || (this._CommonFile.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile");
                    if (previousValue != null)
                    {
                        this._CommonFile.Entity = null;
                        previousValue.SubUsersDetails.Remove(this);
                    }
                    this._CommonFile.Entity = value;
                    if (value != null)
                    {
                        this._FileId = value.FileId;
                        value.SubUsersDetails.Add(this);
                    }
                    else
                    {
                        this._FileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubUsersIdentity in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Users_Identity")]
    public partial class SubUsersIdentity : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserIdentityId;

        private string _PanNumber;

        private int? _PanFileId;

        private string _AadharNumber;

        private int? _AadharFrontFileId;

        private int? _AadharBackFileId;

        private int? _UId;
        #pragma warning restore 0649

        private EntityRef<CommonFile> _CommonFile_AadharBackFileId;

        private EntityRef<CommonFile> _CommonFile_AadharFrontFileId;

        private EntityRef<CommonFile> _CommonFile_PanFileId;

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdentityIdChanging(int value);
        partial void OnUserIdentityIdChanged();
        partial void OnPanNumberChanging(string value);
        partial void OnPanNumberChanged();
        partial void OnPanFileIdChanging(int? value);
        partial void OnPanFileIdChanged();
        partial void OnAadharNumberChanging(string value);
        partial void OnAadharNumberChanged();
        partial void OnAadharFrontFileIdChanging(int? value);
        partial void OnAadharFrontFileIdChanged();
        partial void OnAadharBackFileIdChanging(int? value);
        partial void OnAadharBackFileIdChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        #endregion

        public SubUsersIdentity()
        {
            this._CommonFile_AadharBackFileId  = default(EntityRef<CommonFile>);
            this._CommonFile_AadharFrontFileId  = default(EntityRef<CommonFile>);
            this._CommonFile_PanFileId  = default(EntityRef<CommonFile>);
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserIdentityId in the schema.
        /// </summary>
        [Column(Storage = "_UserIdentityId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserIdentityId
        {
            get
            {
                return this._UserIdentityId;
            }
            set
            {
                if (this._UserIdentityId != value)
                {
                    this.OnUserIdentityIdChanging(value);
                    this.SendPropertyChanging("UserIdentityId");
                    this._UserIdentityId = value;
                    this.SendPropertyChanged("UserIdentityId");
                    this.OnUserIdentityIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PanNumber in the schema.
        /// </summary>
        [Column(Storage = "_PanNumber", DbType = "VARCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string PanNumber
        {
            get
            {
                return this._PanNumber;
            }
            set
            {
                if (this._PanNumber != value)
                {
                    this.OnPanNumberChanging(value);
                    this.SendPropertyChanging("PanNumber");
                    this._PanNumber = value;
                    this.SendPropertyChanged("PanNumber");
                    this.OnPanNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PanFileId in the schema.
        /// </summary>
        [Column(Storage = "_PanFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? PanFileId
        {
            get
            {
                return this._PanFileId;
            }
            set
            {
                if (this._PanFileId != value)
                {
                    if (this._CommonFile_PanFileId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPanFileIdChanging(value);
                    this.SendPropertyChanging("PanFileId");
                    this._PanFileId = value;
                    this.SendPropertyChanged("PanFileId");
                    this.OnPanFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AadharNumber in the schema.
        /// </summary>
        [Column(Storage = "_AadharNumber", DbType = "VARCHAR(12)", UpdateCheck = UpdateCheck.Never)]
        public string AadharNumber
        {
            get
            {
                return this._AadharNumber;
            }
            set
            {
                if (this._AadharNumber != value)
                {
                    this.OnAadharNumberChanging(value);
                    this.SendPropertyChanging("AadharNumber");
                    this._AadharNumber = value;
                    this.SendPropertyChanged("AadharNumber");
                    this.OnAadharNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AadharFrontFileId in the schema.
        /// </summary>
        [Column(Storage = "_AadharFrontFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? AadharFrontFileId
        {
            get
            {
                return this._AadharFrontFileId;
            }
            set
            {
                if (this._AadharFrontFileId != value)
                {
                    if (this._CommonFile_AadharFrontFileId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAadharFrontFileIdChanging(value);
                    this.SendPropertyChanging("AadharFrontFileId");
                    this._AadharFrontFileId = value;
                    this.SendPropertyChanged("AadharFrontFileId");
                    this.OnAadharFrontFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AadharBackFileId in the schema.
        /// </summary>
        [Column(Storage = "_AadharBackFileId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? AadharBackFileId
        {
            get
            {
                return this._AadharBackFileId;
            }
            set
            {
                if (this._AadharBackFileId != value)
                {
                    if (this._CommonFile_AadharBackFileId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAadharBackFileIdChanging(value);
                    this.SendPropertyChanging("AadharBackFileId");
                    this._AadharBackFileId = value;
                    this.SendPropertyChanged("AadharBackFileId");
                    this.OnAadharBackFileIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile_AadharBackFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersIdentity", Storage="_CommonFile_AadharBackFileId", ThisKey="AadharBackFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile_AadharBackFileId
        {
            get
            {
                return this._CommonFile_AadharBackFileId.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile_AadharBackFileId.Entity;
                if ((previousValue != value) || (this._CommonFile_AadharBackFileId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile_AadharBackFileId");
                    if (previousValue != null)
                    {
                        this._CommonFile_AadharBackFileId.Entity = null;
                        previousValue.SubUsersIdentities_AadharBackFileId.Remove(this);
                    }
                    this._CommonFile_AadharBackFileId.Entity = value;
                    if (value != null)
                    {
                        this._AadharBackFileId = value.FileId;
                        value.SubUsersIdentities_AadharBackFileId.Add(this);
                    }
                    else
                    {
                        this._AadharBackFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile_AadharBackFileId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile_AadharFrontFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersIdentity1", Storage="_CommonFile_AadharFrontFileId", ThisKey="AadharFrontFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile_AadharFrontFileId
        {
            get
            {
                return this._CommonFile_AadharFrontFileId.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile_AadharFrontFileId.Entity;
                if ((previousValue != value) || (this._CommonFile_AadharFrontFileId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile_AadharFrontFileId");
                    if (previousValue != null)
                    {
                        this._CommonFile_AadharFrontFileId.Entity = null;
                        previousValue.SubUsersIdentities_AadharFrontFileId.Remove(this);
                    }
                    this._CommonFile_AadharFrontFileId.Entity = value;
                    if (value != null)
                    {
                        this._AadharFrontFileId = value.FileId;
                        value.SubUsersIdentities_AadharFrontFileId.Add(this);
                    }
                    else
                    {
                        this._AadharFrontFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile_AadharFrontFileId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CommonFile_PanFileId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CommonFile_SubUsersIdentity2", Storage="_CommonFile_PanFileId", ThisKey="PanFileId", OtherKey="FileId", IsForeignKey=true)]
        public CommonFile CommonFile_PanFileId
        {
            get
            {
                return this._CommonFile_PanFileId.Entity;
            }
            set
            {
                CommonFile previousValue = this._CommonFile_PanFileId.Entity;
                if ((previousValue != value) || (this._CommonFile_PanFileId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("CommonFile_PanFileId");
                    if (previousValue != null)
                    {
                        this._CommonFile_PanFileId.Entity = null;
                        previousValue.SubUsersIdentities_PanFileId.Remove(this);
                    }
                    this._CommonFile_PanFileId.Entity = value;
                    if (value != null)
                    {
                        this._PanFileId = value.FileId;
                        value.SubUsersIdentities_PanFileId.Add(this);
                    }
                    else
                    {
                        this._PanFileId = default(int?);
                    }
                    this.SendPropertyChanged("CommonFile_PanFileId");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUsersIdentity", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.SubUsersIdentities.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.SubUsersIdentities.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for HisabKaroDBContext.SubUsersTotalworkexperience in the schema.
    /// </summary>
    [Table(Name = @"dbo.sub_Users_TotalWorkExperiences")]
    public partial class SubUsersTotalworkexperience : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserTotalWorkExperienceId;

        private string _Duration;

        private bool? _LookingForJob = false;

        private bool? _CurrentlyWorking = false;

        private string _Description;

        private int? _UId;
        #pragma warning restore 0649

        private EntityRef<SubUser> _SubUser;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserTotalWorkExperienceIdChanging(int value);
        partial void OnUserTotalWorkExperienceIdChanged();
        partial void OnDurationChanging(string value);
        partial void OnDurationChanged();
        partial void OnLookingForJobChanging(bool? value);
        partial void OnLookingForJobChanged();
        partial void OnCurrentlyWorkingChanging(bool? value);
        partial void OnCurrentlyWorkingChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnUIdChanging(int? value);
        partial void OnUIdChanged();
        #endregion

        public SubUsersTotalworkexperience()
        {
            this._SubUser  = default(EntityRef<SubUser>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserTotalWorkExperienceId in the schema.
        /// </summary>
        [Column(Storage = "_UserTotalWorkExperienceId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserTotalWorkExperienceId
        {
            get
            {
                return this._UserTotalWorkExperienceId;
            }
            set
            {
                if (this._UserTotalWorkExperienceId != value)
                {
                    this.OnUserTotalWorkExperienceIdChanging(value);
                    this.SendPropertyChanging("UserTotalWorkExperienceId");
                    this._UserTotalWorkExperienceId = value;
                    this.SendPropertyChanged("UserTotalWorkExperienceId");
                    this.OnUserTotalWorkExperienceIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Duration in the schema.
        /// </summary>
        [Column(Storage = "_Duration", DbType = "VARCHAR(30)", UpdateCheck = UpdateCheck.Never)]
        public string Duration
        {
            get
            {
                return this._Duration;
            }
            set
            {
                if (this._Duration != value)
                {
                    this.OnDurationChanging(value);
                    this.SendPropertyChanging("Duration");
                    this._Duration = value;
                    this.SendPropertyChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LookingForJob in the schema.
        /// </summary>
        [Column(Storage = "_LookingForJob", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? LookingForJob
        {
            get
            {
                return this._LookingForJob;
            }
            set
            {
                if (this._LookingForJob != value)
                {
                    this.OnLookingForJobChanging(value);
                    this.SendPropertyChanging("LookingForJob");
                    this._LookingForJob = value;
                    this.SendPropertyChanged("LookingForJob");
                    this.OnLookingForJobChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CurrentlyWorking in the schema.
        /// </summary>
        [Column(Storage = "_CurrentlyWorking", DbType = "BIT", UpdateCheck = UpdateCheck.Never)]
        public bool? CurrentlyWorking
        {
            get
            {
                return this._CurrentlyWorking;
            }
            set
            {
                if (this._CurrentlyWorking != value)
                {
                    this.OnCurrentlyWorkingChanging(value);
                    this.SendPropertyChanging("CurrentlyWorking");
                    this._CurrentlyWorking = value;
                    this.SendPropertyChanged("CurrentlyWorking");
                    this.OnCurrentlyWorkingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", DbType = "VARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UId in the schema.
        /// </summary>
        [Column(Storage = "_UId", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? UId
        {
            get
            {
                return this._UId;
            }
            set
            {
                if (this._UId != value)
                {
                    if (this._SubUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUIdChanging(value);
                    this.SendPropertyChanging("UId");
                    this._UId = value;
                    this.SendPropertyChanged("UId");
                    this.OnUIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SubUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SubUser_SubUsersTotalworkexperience", Storage="_SubUser", ThisKey="UId", OtherKey="UId", IsForeignKey=true)]
        public SubUser SubUser
        {
            get
            {
                return this._SubUser.Entity;
            }
            set
            {
                SubUser previousValue = this._SubUser.Entity;
                if ((previousValue != value) || (this._SubUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("SubUser");
                    if (previousValue != null)
                    {
                        this._SubUser.Entity = null;
                        previousValue.SubUsersTotalworkexperiences.Remove(this);
                    }
                    this._SubUser.Entity = value;
                    if (value != null)
                    {
                        this._UId = value.UId;
                        value.SubUsersTotalworkexperiences.Add(this);
                    }
                    else
                    {
                        this._UId = default(int?);
                    }
                    this.SendPropertyChanged("SubUser");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
